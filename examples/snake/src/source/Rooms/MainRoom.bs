class MainRoom extends BGE.Room

  game_started = false

  snake = invalid
  apple = invalid
  scoreHandler = invalid

  grid = 40

  gridHeight = 0
  gridWidth = 0
  wallWidth = 2 * 40
  screenW = 0
  screenH = 0

  sub new(game) as void
    super(game)
    m.name = "MainRoom"
  end sub

  override sub onCreate(args)
    m.game.addEntity(new PauseHandler(m.game))
    m.game.addEntity(new ScoreHandler(m.game))

    m.screenW = m.game.canvas.getWidth()
    m.screenH = m.game.canvas.getHeight()

    m.gridHeight = cint(m.screenH / m.grid)
    if m.gridHeight mod 2 = 1
      m.gridHeight--
    end if
    m.gridWidth = cint(m.screenW / m.grid)
    if m.gridWidth mod 2 = 1
      m.gridWidth--
    end if
    m.game_started = false
    m.game.canvas.setOffset(100, 100)

    m.addWallsColliders()
  end sub

  override sub onCollision(colliderName as string, other_colliderName as string, other_entity as object)
    ?"Collision: " + colliderName + " and " + other_colliderName + " of " + other_entity.name
  end sub


  sub addWallsColliders()
    m.addRectangleCollider("wallTop", m.screenW, m.wallWidth, 0, m.screenH)
    m.addRectangleCollider("wallLeft", m.wallWidth, m.screenH, 0, m.screenH)
    m.addRectangleCollider("wallBottom", m.screenW, m.wallWidth, 0, m.wallWidth)
    m.addRectangleCollider("wallRight", m.wallWidth, m.screenH, m.screenW - m.wallWidth, m.screenH)
  end sub

  override sub onUpdate(dt)
    if m.game_started and not BGE.isValidEntity(m.snake)
      m.snake = m.game.addEntity(new Snake(m.game), {gridX: cint(m.gridWidth / 2), gridY: cint(m.gridHeight / 2), grid: m.grid})
    end if
    if m.game_started and not BGE.isValidEntity(m.apple) and BGE.isValidEntity(m.snake)
      applePos = m.getAppleGrid()
      m.apple = m.game.addEntity(new Apple(m.game), {grid: m.grid, gridX: applePos.x, gridY: applePos.y})
    end if
  end sub

  override sub onDrawBegin(renderObj as BGE.Renderer)
    m.drawWalls(renderObj)
    frameCenter = renderObj.getCanvasCenter()
    if not m.game_started
      if invalid <> m.snake
        renderObj.DrawText("Game Over!", frameCenter.x, frameCenter.y + 20, BGE.Colors().white, m.game.getFont("default"), "center")
      end if
      renderObj.DrawText("Press OK To Play", frameCenter.x, frameCenter.y - 20, BGE.Colors().white, m.game.getFont("default"), "center")
    end if
  end sub

  override sub onInput(input)
    if input.isButton("back")
      m.game.End()
    end if
    if not m.game_started and input.isButton("ok")
      m.game_started = true
      m.game.destroyEntity(m.snake)
      m.game.postGameEvent("game_start")
    end if
  end sub

  override sub onGameEvent(event as string, data as object)
    if event = "game_over"
      m.game_started = false

    end if
  end sub


  function getAppleGrid() as object

    applePosition = invalid
    while applePosition = invalid
      gridX = rnd(m.gridWidth - 4) + 1
      gridY = rnd(m.gridHeight - 4) + 1
      if not m.snake.checkPositionForSnake(gridX, gridY)
        applePosition = {x: gridX, y: gridY}
      end if
    end while

    return applePosition
  end function


  sub drawWalls(renderObj as BGE.Renderer)
    color = BGE.Colors().White
    renderObj.DrawRectangle(0, 0, m.screenW, m.wallWidth, color)
    renderObj.DrawRectangle(0, 0, m.wallWidth, m.screenH, color)
    renderObj.DrawRectangle(0, m.screenH - m.wallWidth, m.screenW, m.wallWidth, color)
    renderObj.DrawRectangle(m.screenW - m.wallWidth, 0, m.wallWidth, m.screenH, color)
  end sub

end class
