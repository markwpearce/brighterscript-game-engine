sub main()

  game = new BGE.Game(1280, 720) ' This initializes the game engine
  game.scaleCanvasToFillScreen()
  game.setCamera(new BGE.Camera3d())

  try
    game.loadBitmap("roku", "pkg:/sprites/roku-logo-purple.png")
    game.load3dModel("cubeBinary", "pkg:/models/3dCubeBinary.stl")
    game.load3dModel("cubeAscii", "pkg:/models/3dCubeAscii.stl")
    ' game.load3dModel("humanoid", "pkg:/models/humanoid_tri.stl")
    game.load3dModel("simple_box", "pkg:/models/simple_box.stl")
    game.load3dModel("sphere", "pkg:/models/sphere.stl")
    game.load3dModel("invader", "pkg:/models/simplify_space_invader_magnet.stl")
    game.load3dModel("simple_teapot", "pkg:/models/simplify_teapot.stl")'
    game.load3dModel("teapot", "pkg:/models/teapot.stl")'
    game.load3dModel("bird", "pkg:/models/low_poly_bird.stl")
  catch e
    ? e
    return
  end try

  cubes_room = new CubesRoom(game)
  game.defineRoom(cubes_room)

  trees_room = new TreesRoom(game)
  game.defineRoom(trees_room)

  images_room = new ImagesRoom(game)
  game.defineRoom(images_room)

  poly_room = new PolyRoom(game)
  game.defineRoom(poly_room)

  model_room = new ModelRoom(game)
  game.defineRoom(model_room)

  game.changeRoom(getRoomNames()[0])

  game.getDebugUI().addChild(new BGE.Debug.FpsDisplay(game))
  game.getDebugUI().addChild(new BGE.Debug.InputDisplay(game))

  game.getDebugUI().addChild(new BGE.Debug.MemoryDisplay(game))
  game.getDebugUI().addChild(new BGE.Debug.GarbageCollectorDisplay(game))

  game.debugDrawColliders(true)
  game.debugDrawEntityDetails(true)
  game.debugShowUi(true, true)
  ' game.canvas.renderer.drawDebugCells = true
  game.Play()

  ' vscode_rale_tracker_entry
end sub

function getRoomNames()
  return ["ModelRoom", "ImagesRoom", "CubesRoom", "PolyRoom", "TreesRoom"]
end function


sub goToNextRoom(currentRoom as BGE.Room, direction as integer)

  currentIndex = 0
  i = 0
  roomNames = getRoomNames()
  for each name in roomNames
    if currentRoom.name = name
      currentIndex = i
      exit for
    end if
    i++
  end for

  nextIndex = currentIndex + direction

  if nextIndex >= roomNames.count()
    nextIndex = 0
  else if nextIndex < 0
    nextIndex = roomNames.count() - 1
  end if

  currentRoom.game.changeRoom(roomNames[nextIndex])
  currentRoom.game.canvas.renderer.camera.useDefaultCameraTarget()
  currentRoom.game.canvas.renderer.camera.position.y = 30
end sub

sub testBytesToFloat()

  data = [
    {value: 23.5, bytes: [&h41, &hBC, &h00, &h00], little: false}
    {value: 7829.1, bytes: [&h45, &hf4, &ha8, &hd3], little: false}
    {value: -0.44674, bytes: [&hBE, &hE4, &hBB, &h1B], little: false}
    {value: 0, bytes: [&h00, &h00, &h00, &h00], little: false}
    {value: -256, bytes: [&hC3, &h80, &h00, &h00], little: false}
    {value: -218726.13, bytes: [&hC8, &h55, &h99, &h88], little: false}
    {value: -0.5, bytes: [&hBF, &h00, &h00, &h00], little: false}
    {value: 0.5, bytes: [&h3F, &h00, &h00, &h00], little: false}
    {value: 1, bytes: [&h3F, &h80, &h00, &h00], little: false}
    {value: -1, bytes: [&hBF, &h80, &h00, &h00], little: false}
    {value: 65535, bytes: [&h00, &hFF, &h7F, &h47], little: true}
  ]

  for each datum in data
    ? `${datum.value} -> ${BGE.bytesToFloat(datum.bytes, 0, datum.little)}`
  end for
end sub



sub testSTL()
  try
    model = BGE.Parsers.parseSTLFile("pkg:/models/3dCubeBinary.stl")
    print model.toStr()
  catch e
    ? e
  end try

end sub


sub test()
  game = new BGE.Game(1280, 720) ' This initializes the game engine
  game.canvas.renderer.drawDebugCells = true
  game.loadBitmap("roku", "pkg:/sprites/roku-logo-purple.png")



  ' scratchBmp = CreateObject("roBitmap", {width: game.canvas.getWidth(), height: game.canvas.getHeight(), AlphaEnable: true})
  ' scratchRegion = CreateObject("roRegion", scratchBmp, 0, 0, 200, 200)
  'rokuBitmap = game.getBitmap("roku")

  'game.canvas.renderer.drawObjectTo(scratchRegion, 0, 0, rokuBitmap)
  'game.canvas.renderer.drawObject(0, 0, scratchRegion)

  'game.screen.swapBuffers()
  'sleep(2000)
  testRender2(game)
  return
  totalTimer = CreateObject("roTimeSpan")
  for i = 0 to 1000
    testRender2(game)
    'sleep(10)
  end for

  ?totalTimer.totalMilliseconds()

end sub


sub testRender(game)

  rokuBitmap = game.getBitmap("roku")
  rokuBitmapRegion = CreateObject("roRegion", rokuBitmap, 0, 0, rokuBitmap.getWidth(), rokuBitmap.getHeight())
  'rokuBitmapRegion.setPretranslation(50, 100)
  ' game.canvas.clear(0)
  srcPoints = [
    BGE.Math.VectorOps.create(0, 0),
    BGE.Math.VectorOps.create(0, 400)
    BGE.Math.VectorOps.create(400, 400),


    'BGE.Math.VectorOps.create(0, 0),
    'BGE.Math.VectorOps.create(400, 400)
    'BGE.Math.VectorOps.create(400, 000),

    'BGE.Math.VectorOps.create(200, 000),
    'BGE.Math.VectorOps.create(100, 200)
    'BGE.Math.VectorOps.create(300, 200),

    'BGE.Math.VectorOps.create(400, 0),
    'BGE.Math.VectorOps.create(200, 200)
    'BGE.Math.VectorOps.create(400, 400),
  ]


  destPoints = [
    ' BGE.Math.VectorOps.create(900, 400),
    ' BGE.Math.VectorOps.create(700, 350),
    ' BGE.Math.VectorOps.create(1000, 500),

    ' BGE.Math.VectorOps.create(900, 400),
    ' BGE.Math.VectorOps.create(700, 410),
    ' BGE.Math.VectorOps.create(800, 600),

    ' BGE.Math.VectorOps.create(850, 420),
    ' BGE.Math.VectorOps.create(900, 350),
    ' BGE.Math.VectorOps.create(550, 500),

    BGE.Math.VectorOps.create(600, 500),
    BGE.Math.VectorOps.create(800, 550),
    BGE.Math.VectorOps.create(810, 450),

    ' BGE.Math.VectorOps.create(900, 700),
    ' BGE.Math.VectorOps.create(870, 300),
    ' BGE.Math.VectorOps.create(700, 320),

    ' BGE.Math.VectorOps.create(950, 600),
    ' BGE.Math.VectorOps.create(900, 300),
    ' BGE.Math.VectorOps.create(500, 500),



  ]



  destPoints2 = [
    ' BGE.Math.VectorOps.create(900, 400),
    ' BGE.Math.VectorOps.create(700, 350),
    ' BGE.Math.VectorOps.create(1000, 500),

    ' BGE.Math.VectorOps.create(900, 400),
    ' BGE.Math.VectorOps.create(700, 410),
    ' BGE.Math.VectorOps.create(800, 600),

    ' BGE.Math.VectorOps.create(850, 420),
    ' BGE.Math.VectorOps.create(900, 350),
    ' BGE.Math.VectorOps.create(550, 500),

    BGE.Math.VectorOps.create(800, 500),
    BGE.Math.VectorOps.create(1000, 550),
    BGE.Math.VectorOps.create(1010, 450),

    ' BGE.Math.VectorOps.create(900, 700),
    ' BGE.Math.VectorOps.create(870, 300),
    ' BGE.Math.VectorOps.create(700, 320),

    ' BGE.Math.VectorOps.create(950, 600),
    ' BGE.Math.VectorOps.create(900, 300),
    ' BGE.Math.VectorOps.create(500, 500),



  ]

  srcOffSetX = 100
  srcOffSetY = 300

  game.canvas.renderer.drawObject(srcOffSetX, srcOffSetY, rokuBitmapRegion)
  game.canvas.renderer.drawSquare(srcPoints[0].x + srcOffSetX, srcPoints[0].y + srcOffSetY, 4, BGE.Colors().Red)
  game.canvas.renderer.drawSquare(srcPoints[1].x + srcOffSetX, srcPoints[1].y + srcOffSetY, 4, BGE.Colors().Green)
  game.canvas.renderer.drawSquare(srcPoints[2].x + srcOffSetX, srcPoints[2].y + srcOffSetY, 4, BGE.Colors().Blue)

  rokuImageRegionId = new BGE.RegionWithId(rokuBitmapRegion, "rokuBitmap")
  game.canvas.renderer.drawBitmapTriangleTo(game.canvas.renderer.draw2d, rokuImageRegionId, srcPoints, destPoints)
  game.canvas.renderer.drawDebugCells = true

  game.canvas.renderer.drawBitmapTriangleTo(game.canvas.renderer.draw2d, rokuImageRegionId, srcPoints, destPoints2)
  ?"Draw Calls: ";game.canvas.renderer.drawCallsLastFrame


  ' triangle = game.canvas.renderer.makeIntoTriangle(rokuBitmapRegion, points)
  ' game.canvas.renderer.drawObject(300, 300, triangle.bitmap)
  ' ?"Draw Calls: ";game.canvas.renderer.drawCallsLastFrame

  ' game.canvas.renderer.drawObject(700, 300, rokuBitmap)


  ' game.canvas.renderer.drawSquare(700 + points[0].x, 300 + points[0].y, 4, BGE.Colors().Red)
  ' game.canvas.renderer.drawSquare(700 + points[1].x, 300 + points[1].y, 4, BGE.Colors().Green)
  ' game.canvas.renderer.drawSquare(700 + points[2].x, 300 + points[2].y, 4, BGE.Colors().Blue)




  game.canvas.renderer.drawSquare(destPoints[0].x, destPoints[0].y, 4, BGE.Colors().Red)
  game.canvas.renderer.drawSquare(destPoints[1].x, destPoints[1].y, 4, BGE.Colors().Green)
  game.canvas.renderer.drawSquare(destPoints[2].x, destPoints[2].y, 4, BGE.Colors().Blue)


  game.screen.swapBuffers()
end sub


sub testRender2(game)
  triPoints = [
    BGE.Math.VectorOps.create(400, 300)'getRandomScreenPoint(400, 1280, 720),
    BGE.Math.VectorOps.create(800, 400),
    BGE.Math.VectorOps.create(600, 200), 'getRandomScreenPoint(400, 1280, 720)
  ]
  for i = 0 to 2

    game.canvas.renderer.drawTriangle(triPoints, 0, 0, getColor())
    game.canvas.renderer.drawTrianglePoints(triPoints)
    game.screen.swapBuffers()
    game.canvas.renderer.onSwapBuffers()
    sleep(5)
  end for

  'game.canvas.renderer.triangleCache.cleanCache()

  'game.canvas.clear(&hff)
end sub

function testSkew()
  game = new BGE.Game(1280, 720) ' This initializes the game engine
  game.canvas.renderer.drawDebugCells = true
  game.loadBitmap("roku", "pkg:/sprites/roku-logo-purple.png")



  for i = 0 to 20
    aPoint = BGE.Math.VectorOps.create(320, 385)'getRandomScreenPoint2(300, 300, 100, 200)
    bPoint = BGE.Math.VectorOps.create(619, 293)'getRandomScreenPoint2(300, 300, 100, 200)

    game.canvas.renderer.drawSquare(aPoint.x, aPoint.y, 10, BGE.Colors().Red)
    game.canvas.renderer.drawSquare(bPoint.x, bPoint.y, 10, BGE.Colors().Blue)


    aAngle = -1.273'-rnd(0) * BGE.Math.halfPI()

    originPoint = BGE.Math.getThirdRightTrianglePoint(aPoint, bPoint, aAngle)
    if rodash.isNotInvalid(originPoint)
      game.canvas.renderer.drawLine(aPoint.x, aPoint.y, originPoint.x, originPoint.y, BGE.Colors().Pink)
      game.canvas.renderer.drawLine(bPoint.x, bPoint.y, originPoint.x, originPoint.y, BGE.Colors().Pink)
      game.canvas.renderer.drawSquare(originPoint.x, originPoint.y, 10, BGE.Colors().Pink)
    end if
    game.screen.swapBuffers()

    game.canvas.renderer.onSwapBuffers()

    sleep(2000)
  end for

  sleep(2000)

end function


function getRandomScreenPoint(padding, w, h)
  x = rnd(w - 2 * padding) + padding
  y = rnd(h - 2 * padding) + padding
  return BGE.Math.VectorOps.create(x, y)
end function

function getRandomScreenPoint2(w, h, offsetX, OffsetY)
  x = rnd(0) * w + offsetX
  y = rnd(0) * h + OffsetY
  return BGE.Math.VectorOps.create(x, y)
end function

function getColor(r = 255 as integer, g = 255 as integer, b = 255 as integer, a = 255 as integer) as integer
  red% = rnd(r)
  green% = rnd(g)
  blue% = rnd(b)
  color% = (red% << 24) + (green% << 16) + (blue% << 8) + a
  return color%
end function