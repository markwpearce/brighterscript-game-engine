class ImageCube extends BGE.GameEntity

  speed = 0.5
  size = 400

  doRot = false

  rotAxisIndex = 2 ' z

  function new(game) as void
    super(game)
    m.name = "ImageCube"
  end function


  override function onCreate(args)
    if invalid <> args.Speed
      m.speed = args.speed
    end if
    if invalid <> args.size
      m.size = args.size
    end if

    'm.rotation.y = BGE.Math.Pi()
    'm.rotation.z =
    s = m.size

    'm.rotation.x = BGE.Math.DegreesToRadians(-150)
    'SQUARE
    'm.addLineDrawable(new BGE.Math.Vector(0, 0, 0), new BGE.Math.Vector(s, 0, 0), BGE.ColorsRGB().White)
    'm.addLineDrawable(new BGE.Math.Vector(0, 0, 0), new BGE.Math.Vector(0, s, 0), BGE.ColorsRGB().White)
    'm.addLineDrawable(new BGE.Math.Vector(s, 0, 0), new BGE.Math.Vector(s, s, 0), BGE.ColorsRGB().White)
    'm.addLineDrawable(new BGE.Math.Vector(0, s, 0), new BGE.Math.Vector(s, s, 0), BGE.ColorsRGB().White)

    'CUBE

    rokuBitmap = m.game.getBitmap("roku")
    rokuBitmapRegion = CreateObject("roRegion", rokuBitmap, 0, 0, rokuBitmap.getWidth(), rokuBitmap.getHeight())
    halfPi = BGE.Math.halfPI()
    m.addImage("side1", rokuBitmapRegion)
    m.addImage("side2", rokuBitmapRegion, {
      offset: new BGE.Math.Vector(s, 0, 0),
      rotation: new BGE.Math.Vector(0, -halfPi, 0)
    })
    m.addImage("side3", rokuBitmapRegion, {
      offset: new BGE.Math.Vector(s, 0, -s),
      rotation: new BGE.Math.Vector(0, 2 * -halfPi, 0)
    })
    m.addImage("side4", rokuBitmapRegion, {
      offset: new BGE.Math.Vector(0, 0, -s),
      rotation: new BGE.Math.Vector(0, 3 * -halfPi, 0)
    })
    m.addImage("top", rokuBitmapRegion, {
      offset: new BGE.Math.Vector(0, 0, -s),
      rotation: new BGE.Math.Vector(halfPi, 0, 0)
    })
    m.addImage("bottom", rokuBitmapRegion, {
      offset: new BGE.Math.Vector(0, -s, 0),
      rotation: new BGE.Math.Vector(-halfPi, 0, 0)
    })
  end function

  override function onUpdate(deltaTime as float)

    if m.doRot
      rotAxes = ["x", "y", "z"]
      rotAxis = rotAxes[m.rotAxisIndex]
      ' m.rotation.y += deltaTime * m.speed
      m.rotation[rotAxis] += deltaTime * m.speed
      otherotAxisIndex = m.rotAxisIndex + 1
      if otherotAxisIndex > 2
        otherotAxisIndex = 0
      end if
      rotAxis = rotAxes[otherotAxisIndex]
      m.rotation[rotAxis] += deltaTime * m.speed

    end if
  end function

  override sub onInput(input)
    if input.press
      if input.isButton("options")
        m.doRot = not m.doRot
      else if input.isButton("ok")
        m.rotAxisIndex += 1
        if m.rotAxisIndex > 2
          m.rotAxisIndex = 0
        end if
      end if
    end if
  end sub



end class
