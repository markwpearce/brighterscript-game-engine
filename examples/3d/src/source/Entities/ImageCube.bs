class ImageCube extends BGE.GameEntity

  speed = 0.5
  size = 400

  doRotation = false

  rotAxisIndex = 2 ' z

  sub new(game)
    super(game)
    m.name = "ImageCube"
  end sub


  override sub onCreate(args)
    if invalid <> args.Speed
      m.speed = args.speed
    end if
    if invalid <> args.size
      m.size = args.size
    end if

    'm.rotation.y = BGE.Math.Pi()
    'm.rotation.z =
    s = 400

    'm.rotation.x = BGE.Math.DegreesToRadians(-150)
    'SQUARE
    'm.addLineDrawable(BGE.Math.VectorOps.create(0, 0, 0), BGE.Math.VectorOps.create(s, 0, 0), BGE.ColorsRGB().White)
    'm.addLineDrawable(BGE.Math.VectorOps.create(0, 0, 0), BGE.Math.VectorOps.create(0, s, 0), BGE.ColorsRGB().White)
    'm.addLineDrawable(BGE.Math.VectorOps.create(s, 0, 0), BGE.Math.VectorOps.create(s, s, 0), BGE.ColorsRGB().White)
    'm.addLineDrawable(BGE.Math.VectorOps.create(0, s, 0), BGE.Math.VectorOps.create(s, s, 0), BGE.ColorsRGB().White)

    'CUBE
    m.scale.x = m.size / 400
    m.scale.y = m.size / 400
    m.scale.z = m.size / 400

    rokuBitmap = m.game.getBitmap("roku")
    rokuBitmapRegion = CreateObject("roRegion", rokuBitmap, 0, 0, rokuBitmap.getWidth(), rokuBitmap.getHeight())
    halfPi = BGE.Math.halfPI()

    shoWOneFaceOnly = false

    m.addImage("front", rokuBitmapRegion, {
      offset: BGE.Math.VectorOps.create(s, 0, -s),
      rotation: BGE.Math.VectorOps.create(0, 2 * -halfPi, 0)
    })
    if not shoWOneFaceOnly
      m.addImage("back", rokuBitmapRegion)
      m.addImage("right", rokuBitmapRegion, {
        offset: BGE.Math.VectorOps.create(s, 0, 0),
        rotation: BGE.Math.VectorOps.create(0, -halfPi, 0)
      })

      m.addImage("left", rokuBitmapRegion, {
        offset: BGE.Math.VectorOps.create(0, 0, -s),
        rotation: BGE.Math.VectorOps.create(0, 3 * -halfPi, 0)
      })
      m.addImage("top", rokuBitmapRegion, {
        offset: BGE.Math.VectorOps.create(0, 0, -s),
        rotation: BGE.Math.VectorOps.create(halfPi, 0, 0)
      })
      m.addImage("bottom", rokuBitmapRegion, {
        offset: BGE.Math.VectorOps.create(0, -s, 0),
        rotation: BGE.Math.VectorOps.create(-halfPi, 0, 0)
      })
    end if
  end sub

  override sub onUpdate(deltaTime as float)

    if m.doRotation
      rotAxes = ["x", "y", "z"]
      rotAxis = rotAxes[m.rotAxisIndex]

      m.rotation[rotAxis] += deltaTime * m.speed
      otherotAxisIndex = m.rotAxisIndex + 1
      if otherotAxisIndex > 2
        otherotAxisIndex = 0
      end if
      rotAxis = rotAxes[otherotAxisIndex]
      m.rotation[rotAxis] += deltaTime * m.speed

    end if
  end sub

  override sub onInput(input)
    if input.press
      if input.isButton("ok")
        m.doRotation = not m.doRotation
      else if input.isButton("options")
        m.rotAxisIndex += 1
        if m.rotAxisIndex > 2
          m.rotAxisIndex = 0
        end if
      end if
    end if
  end sub



end class
