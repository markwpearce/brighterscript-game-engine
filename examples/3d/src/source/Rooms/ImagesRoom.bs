class ImagesRoom extends BaseRoom

  imgCubes = []

  cameraSpeed = 100

  cameraVelocity = 0
  cameraRotation = 0

  function new(game) as void
    super(game)
    m.name = "ImagesRoom"
  end function

  override function onCreate(args)
    numCubes = 0

    if numCubes = 0
      m.addImageCube(0, 0, 0, BGE.Math.Pi(), 400)
    else
      cubeSize = 400 / numCubes
      cubeSpace = cubeSize * 2
      startX = 0 - (((numCubes + 1) / 2) * cubeSpace)
      for i = 0 to numCubes
        m.addImageCube(startX + cubeSpace * i, 100, 0, BGE.Math.HalfPi() * i, cubeSize)
      end for
    end if
    m.game.canvas.renderer.camera.position.y = 20

  end function


  override function onUpdate(dt)
    if m.cameraRotation <> 0
      m.game.canvas.renderer.camera.rotate(new BGE.Math.Vector(0, m.cameraRotation * dt, 0))
    end if
    if m.cameraVelocity <> 0
      m.game.canvas.renderer.camera.position.plusEquals(m.game.canvas.renderer.camera.orientation.scale(m.cameraSpeed * dt * m.cameraVelocity))
    end if
  end function

  override function onDrawBegin(canvas)

  end function

  override function onInput(input)
    m.cameraVelocity = 0
    m.cameraRotation = 0
    if input.x <> 0 or input .y <> 0
      m.cameraVelocity = -input.y
      m.cameraRotation = input.x

    end if
    m.handleSceneChange(input)
  end function

  override function onGameEvent(event as string, data as object)
  end function


  sub addImageCube(x, y, z, yTheta, size)
    imgCube = new ImageCube(m.game)
    imgCube.position.x = x
    imgCube.position.y = y
    imgCube.position.z = z
    imgCube.rotation.y = yTheta

    imgCube.rotation.z = BGE.Math.PI() / 6
    imgCube.size = size
    m.game.addEntity(imgCube)
    m.imgCubes.push(imgCube)
  end sub

  override function onChangeRoom(newRoom as BGE.Room) as void
    for each obj in m.imgCubes
      obj.invalidate()
    end for
    m.imgCubes = []
  end function


end class
