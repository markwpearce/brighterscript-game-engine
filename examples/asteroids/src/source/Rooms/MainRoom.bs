class MainRoom extends BGE.Room

  game_started = false

  player = invalid
  rocks = []
  timeSinceLastRock = 0
  timeBetweenRocks = 5

  sub new(game)
    super(game)
    m.name = "MainRoom"
  end sub

  override sub onCreate(args)
    m.game.addEntity(new PauseHandler(m.game))
    ' m.game.addEntity(new ScoreHandler(m.game))
    m.timeSinceLastRock = m.timeBetweenRocks
  end sub

  override sub onCollision(colliderName as string, other_colliderName as string, other_entity as object)
    ?"Collision: " + colliderName + " and " + other_colliderName + " of " + other_entity.name
  end sub



  override sub onUpdate(dt)
    if m.game_started and not BGE.isValidEntity(m.player)
      m.player = m.game.addEntity(new Player(m.game))
    end if
    if m.game_started and not m.player.dead
      m.timeSinceLastRock += dt
      if m.timeSinceLastRock >= m.timeBetweenRocks
        m.timeSinceLastRock = 0
        m.addNewRock()
      end if
    end if
  end sub

  override sub onDrawBegin(renderObj as BGE.Renderer)
    if not m.game_started
      frameCenter = renderObj.getCanvasCenter()
      if invalid <> m.player
        renderObj.DrawText("Game Over!", frameCenter.x, frameCenter.y + 20, BGE.Colors().White, m.game.getFont("default"), "center")
      end if
      renderObj.DrawText("Press OK To Play", frameCenter.x, frameCenter.y - 20, BGE.Colors().White, m.game.getFont("default"), "center")
    end if
  end sub

  override sub onInput(input)
    if input.isButton("back")
      m.game.End()
    end if
    if not m.game_started and input.isButton("ok")
      m.game_started = true
      m.game.postGameEvent("game_start")
    end if
  end sub


  sub clearEntities()
    if invalid <> m.player
      m.game.destroyEntity(m.player)
    end if
    for each rockOld in m.rocks
      m.game.destroyEntity(rockOld)

    end for
    m.rocks = []
  end sub

  sub addNewRock(position = invalid as BGE.Math.Vector, level = 1 as integer, rotationalThrust = 0 as integer, parentRotation = invalid as BGE.Math.Vector)
    height = m.game.getCanvas().GetHeight()
    width = m.game.getCanvas().GetWidth()
    repositionable = true
    rockRotation = new BGE.Math.Vector(0, 0, rnd(360))
    rockPosition = new BGE.Math.Vector()
    if position = invalid
      repositionable = false
      ' generate a position outside the screen
      q = rnd(2)
      rockPosition.x = rnd(200)
      rockPosition.y = rnd(200)
      fudge = 50
      if q = 1
        rockPosition.x -= fudge
        rockPosition.y -= fudge
        rotation = new BGE.Math.Vector(0, 0, 345 - rnd(60) + 90)
      else
        rockPosition.x -= width + fudge
        rockPosition.y -= height + fudge
        rotation = new BGE.Math.Vector(0, 0, 115 + rnd(60) + 90)
      end if
    else
      rockPosition = position.copy()
    end if

    if parentRotation <> invalid
      rockRotation = parentRotation.copy()
      rockRotation.z += (BGE.Math.Pi() / 4) * rotationalThrust
    end if

    m.rocks.push(m.game.addEntity(new Rock(m.game), {
      position: rockPosition,
      level: level,
      rotationalThrust: rotationalThrust,
      rotation: rockRotation,
      repositionable: repositionable
    }))
  end sub

  private sub addExplosion(rockToDie as object, imageScale = 1 as float, soundName = invalid)
    m.game.addEntity(new Explosion(m.game), {
      position: rockToDie.position,
      imageScale: imageScale,
      rotation: rockToDie.rotation,
      soundName: soundName
    })
  end sub

  override sub onGameEvent(event as string, data as object)
    if event = "game_over"
      m.game_started = false
      m.addExplosion(m.player, 5, "die")

    end if
    if event = "game_start"
      m.clearEntities()
    end if

    if event = "rock_hit"
      rockToDie = data.rock
      nextLevel = rockToDie.level + 1
      if nextLevel < 4
        m.addNewRock(rockToDie.position, nextLevel, 1, rockToDie.rotation)
        m.addNewRock(rockToDie.position, nextLevel, -1, rockToDie.rotation)
      end if
      m.addExplosion(rockToDie, 3 / rockToDie.level)
      i = 0
      indexOfRockToDie = -1
      for each rockEntity in m.rocks
        if rockEntity.id = rockToDie.id
          indexOfRockToDie = i
          exit for
        end if
        i++
      end for
      if indexOfRockToDie <> -1
        m.rocks.delete(indexOfRockToDie)
      end if
      m.game.destroyEntity(rockToDie)
      m.game.destroyEntity(data.bullet)
    end if
  end sub

end class
