class MainRoom extends BGE.Room

  game_started = false

  player = invalid
  rocks = []
  timeSinceLastRock = 0
  timeBetweenRocks = 6

  debugLevel = 0
  backgroundImage as BGE.Image
  maxBackgroundOffset = 100

  sub new(game)
    super(game)
    m.name = "MainRoom"
  end sub

  override sub onCreate(args)
    m.game.addEntity(new PauseHandler(m.game))
    m.game.addEntity(new ScoreHandler(m.game))
    screenWidth = m.game.screen.getWidth()
    screenHeight = m.game.screen.getHeight()
    backgroundBmp = m.game.getBitmap("background")
    region = CreateObject("roRegion", backgroundBmp, 0, 0, backgroundBmp.getWidth(), backgroundBmp.getHeight())
    region.SetScaleMode(1)
    region.SetPreTranslation(-backgroundBmp.getWidth() / 2, -backgroundBmp.getHeight() / 2)
    m.backgroundImage = m.addImage("background", region)
    m.backgroundImage.offset.x = m.game.screen.GetWidth() / 2
    m.backgroundImage.offset.y = screenHeight / 2
    m.backgroundImage.offset.z = -10

    m.updateBackground(BGE.Math.VectorOps.create(screenWidth / 2, screenHeight / 2))
    m.timeSinceLastRock = m.timeBetweenRocks
  end sub

  override sub onUpdate(dt)
    if m.game_started and not BGE.isValidEntity(m.player)
      m.player = m.game.addEntity(new Player(m.game))
      m.addNewRock(BGE.Math.VectorOps.create(300, 300))
    end if
    if m.game_started
      if not m.player.dead
        m.timeSinceLastRock += dt
        if m.timeSinceLastRock >= m.timeBetweenRocks
          m.timeSinceLastRock = 0
          m.addNewRock()
        end if
      end if
      m.updateBackground(m.player.position)
    end if
  end sub

  sub updateBackground(point as BGE.Math.vector)
    playerDistFromCenter = BGE.Math.VectorOps.length(BGE.Math.VectorOps.subtract(m.game.canvas.renderer.getCanvasCenter(), point))
    maxDist = m.game.screen.getHeight() / 2
    playerDistFromCenter = BGE.Math.Clamp(playerDistFromCenter, 0, maxDist)
    newScale = BGE.Tweens.CubicTween(1.2, 1, playerDistFromCenter, maxDist)
    m.backgroundImage.scale = BGE.Math.createScaleVector(newScale)
  end sub


  override sub onDrawEnd(renderObj as BGE.Renderer, uiRenderObj as BGE.Renderer)
    if not m.game_started
      frameCenter = renderObj.getCanvasCenter()
      if invalid <> m.player
        renderObj.DrawText("Game Over!", frameCenter.x, frameCenter.y - 20, BGE.Colors().White, m.game.getFont("default"), "center")
      end if
      renderObj.DrawText("Press OK To Play", frameCenter.x, frameCenter.y + 20, BGE.Colors().White, m.game.getFont("default"), "center")
      renderObj.DrawText("Move: Arrows | Shoot: OK", frameCenter.x, frameCenter.y + 60, BGE.Colors().White, m.game.getFont("default"), "center")
    end if
  end sub

  override sub onInput(input)
    if input.press and input.isButton("back")
      m.game.End()
    end if
    if input.press and input.isButton("options")
      m.debugLevel = (m.debugLevel + 1) mod 4
      m.game.debugShowUi(m.debugLevel > 0)
      m.game.debugDrawEntityDetails(m.debugLevel > 1)
      m.game.debugDrawColliders(m.debugLevel > 2)
    end if
    if not m.game_started and input.press and input.isButton("ok")
      m.game_started = true
      m.game.postGameEvent("game_start")
    end if
  end sub


  sub clearEntities()
    if invalid <> m.player
      m.game.destroyEntity(m.player)
    end if
    for each rockOld in m.rocks
      m.game.destroyEntity(rockOld)

    end for
    m.rocks = []
  end sub

  sub addNewRock(position = invalid as BGE.Math.Vector, level = 1 as integer, rotationalThrust = 0 as integer, parentRotation = invalid as BGE.Math.Vector)
    height = m.game.getCanvas().GetHeight()
    width = m.game.getCanvas().GetWidth()
    repositionable = true
    rockPosition = BGE.Math.VectorOps.create()
    zRot = -BGE.Math.HalfPI() / 2 ' about 45 degrees


    if position = invalid
      repositionable = false
      ' generate a position outside the screen
      q = rnd(2)
      fudge = 200
      randomY = rnd(height)

      rockPosition.x -= fudge
      rockPosition.y = randomY

      if q = 2
        rockPosition.x = width + fudge
        rockPosition.y = randomY
        zRot = -1 * (3 * BGE.Math.PI() / 4)' 115 degrees
      end if
      if randomY < (height / 2)
        ' Rock is in lower part of screen, switch rotation so it goes up
        zRot = -zRot
      end if
    else
      rockPosition = BGE.Math.VectorOps.copy(position)
    end if
    rockRotation = BGE.Math.VectorOps.create(0, 0, zRot)' + rnd(0.1) - 0.05)

    if parentRotation <> invalid
      rockRotation = BGE.Math.VectorOps.copy(parentRotation)
      rockRotation.z += (BGE.Math.Pi() / 4) * rotationalThrust
    end if

    m.rocks.push(m.game.addEntity(new Rock(m.game), {
      position: rockPosition,
      level: level,
      rotationalThrust: rotationalThrust,
      rotation: rockRotation,
      repositionable: repositionable
    }))
  end sub

  private sub addExplosion(rockToDie as object, imageScale = 1 as float, soundName = invalid)
    m.game.addEntity(new Explosion(m.game), {
      position: rockToDie.position,
      imageScale: imageScale,
      rotation: rockToDie.rotation,
      soundName: soundName
    })
  end sub

  override sub onGameEvent(event as string, data as object)
    if event = "game_over"
      m.game_started = false
      m.addExplosion(m.player, 5, "die")

    end if
    if event = "game_start"
      m.clearEntities()
    end if

    if event = "rock_hit"
      rockToDie = data.rock
      nextLevel = rockToDie.level + 1
      if nextLevel < 4
        m.addNewRock(rockToDie.position, nextLevel, 1, rockToDie.rotation)
        m.addNewRock(rockToDie.position, nextLevel, -1, rockToDie.rotation)
      end if
      m.addExplosion(rockToDie, 3 / rockToDie.level)
      i = 0
      indexOfRockToDie = -1
      for each rockEntity in m.rocks
        if rockEntity.id = rockToDie.id
          indexOfRockToDie = i
          exit for
        end if
        i++
      end for
      if indexOfRockToDie <> -1
        m.rocks.delete(indexOfRockToDie)
      end if
      m.game.destroyEntity(rockToDie)
      m.game.destroyEntity(data.bullet)
    end if
  end sub

end class
