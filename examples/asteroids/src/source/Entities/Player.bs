
class Player extends SpaceEntity

  rocketCollider = invalid
  rocketImage = invalid
  rocketOnImage = invalid
  thrust = 0
  dead = false

  acceleration = 2
  rotationAdjustment = BGE.Math.halfPI() ' rocket image points up, so it adds 90 degrees

  sub new(game)
    super(game)
    m.name = "Player"
  end sub


  override sub onCreate(args)
    m.position.y = m.game.getCanvas().GetHeight() / 2
    m.position.x = m.game.getCanvas().GetWidth() / 2
    rocketBitmap = m.game.getBitmap("rocket")
    rocketOnBitmap = m.game.getBitmap("rocket_on")
    m.width = rocketBitmap.GetWidth()
    m.height = rocketBitmap.GetHeight()
    rocketOnHeight = rocketOnBitmap.getHeight()
    m.rocketCollider = m.addCircleCollider("rocket", m.width / 3)

    region = CreateObject("roRegion", rocketBitmap, 0, 0, m.width, m.height)
    region.SetPreTranslation(-m.width / 2, -m.height / 2)
    m.rocketImage = m.addImage("rocket", region, {})
    regionRocketOn = CreateObject("roRegion", rocketOnBitmap, 0, 0, m.width, rocketOnHeight)
    regionRocketOn.SetPreTranslation(-m.width / 2, -m.height / 2)
    m.rocketOnImage = m.addImage("rocket_on", regionRocketOn, {})

  end sub

  override sub onCollision(colliderName as string, other_colliderName as string, other_entity as object)
    if other_entity.name = "Rock" and not m.dead
      m.dead = true
      m.thrust = 0
      m.rotationalThrust = other_entity.rotationalThrust
      m.game.postGameEvent("game_over")
    end if
  end sub


  override sub onUpdate(deltaTime as float)
    super.onUpdate(deltaTime)
    rocketRot = m.getRocketRadRotation()
    m.velocity.x += deltaTime * m.thrust * cos(rocketRot) * m.acceleration
    m.velocity.y += deltaTime * m.thrust * sin(rocketRot) * m.acceleration
    m.rocketImage.enabled = (0 = m.thrust)
    m.rocketOnImage.enabled = (0 <> m.thrust)
    if m.dead
      ' make it spin out in to space
      scale = (10.0 - deltaTime) / 10.0
      m.rocketImage.scale = BGE.Math.createScaleVector(scale * m.rocketImage.scale.x)
    end if
  end sub


  override sub onInput(input as object)
    if not m.dead
      m.rotationalThrust = -input.x
      if input.isButton("up")
        m.thrust = input.y
        m.game.playSound("engine", 50)
      else if input.isButton("ok") and input.press
        m.shoot()
      end if
    end if
  end sub

  function getRocketRadRotation() as float
    return (m.rotation.z + m.rotationAdjustment)
  end function


  override sub shoot()
    bulletPosition = m.position.copy()
    rocketRot = m.getRocketRadRotation()

    bulletPosition.x -= m.rocketCollider.radius * 1.2 * cos(rocketRot)
    bulletPosition.y -= m.rocketCollider.radius * 1.2 * sin(rocketRot)

    bulletRotation = m.rotation.add(new BGE.Math.Vector(0, 0, m.rotationAdjustment))

    m.game.addEntity(new Bullet(m.game), {
      position: bulletPosition,
      rotation: bulletRotation,
      speed: 10 + Abs(m.velocity.x * m.velocity.y)
    })
  end sub
end class
