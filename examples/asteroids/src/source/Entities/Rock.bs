
class Rock extends SpaceEntity

  level = 0
  rockCollider = invalid
  rockImage as BGE.Drawable = invalid
  totalAliveTime = 0
  rotXFlavor = 0
  rotYFlavor = 0
  OkToBounce = true
  bounceTimeOut = 2
  speed = 1


  maxLifeSeconds = 30

  sub new(game)
    super(game)
    m.name = "Rock"
    m.rotXFlavor = rnd(0) / 5
    m.rotYFlavor = rnd(0) / 5
  end sub



  override sub onCreate(args)
    m.position = args.position
    m.rotation = new BGE.Math.Vector(0, 0, 2 * BGE.Math.Pi())
    if invalid <> args.rotation
      m.rotation = args.rotation
    end if
    if invalid <> args.rotationalThrust and 0 <> args.rotationalThrust
      m.rotationalThrust = args.rotationalThrust
    else
      m.rotationalThrust = rnd(2) - 1
    end if
    if m.rotationalThrust = 0
      m.rotationalThrust = -1
    end if
    m.rotationalThrust = BGE.Math.Clamp(m.rotationalThrust, -0.5, 0.5)
    m.level = 1
    if invalid <> args.level
      m.level = args.level
    end if

    m.speed = 1
    if invalid <> args.speed
      m.speed = args.speed
    end if

    if invalid <> args.repositionable
      m.repositionable = args.repositionable
    end if

    m.velocity.x = m.speed * cos(m.rotation.z)
    m.velocity.y = m.speed * sin(m.rotation.z)

    rockBitmap = m.game.getBitmap("rock")
    rockWidth = rockBitmap.GetWidth()
    rockHeight = rockBitmap.GetHeight()
    m.scale = BGE.Math.createScaleVector(1 / (m.level * 2))
    size = BGE.Math.Min(rockWidth, rockHeight) * m.scale.x

    m.width = rockWidth
    m.height = rockHeight
    m.rockCollider = m.addCircleCollider("rock", size / 2)

    region = CreateObject("roRegion", rockBitmap, 0, 0, rockWidth, rockHeight)
    region.SetPreTranslation(-rockWidth / 2, -rockHeight / 2)
    m.rockImage = m.addImage("rock", region, {})
    m.rockImage.enabled = false
  end sub

  override sub onUpdate(dt)
    m.rockImage.enabled = true
    super.onUpdate(dt)
    m.totalAliveTime += dt
    newScaleX = sin(m.totalAliveTime) * (m.rotXFlavor) + 1
    newScaleY = -sin(m.totalAliveTime) * (m.rotYFlavor) + 1
    m.rockImage.scale.x = newScaleX
    m.rockImage.scale.y = newScaleY


    if m.totalAliveTime > m.maxLifeSeconds
      m.dieOutOfBounds = true
    end if
    m.bounceTimeOut -= dt
    if m.bounceTimeOut < 0
      m.bounceTimeOut = 0
    end if
  end sub

  override sub onCollision(colliderName as string, other_colliderName as string, other_entity as object)
    if other_entity.name = "Bullet"

      m.game.postGameEvent("rock_hit", {rock: m, bullet: other_entity})
    end if
    if other_entity.name = "Rock" and m.bounceTimeOut <= 0
      oldVelocity = m.velocity.copy()
      m.velocity = other_entity.velocity.copy()
      other_entity.velocity = oldVelocity
      m.bounceTimeOut = 2
      other_entity.bounceTimeOut = 2
    end if
  end sub

end class
