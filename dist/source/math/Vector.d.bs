namespace BGE.Math
    class Vector
        public x as float
        public y as float
        public z as float
        sub new(x = 0.0 as float, y = 0.0 as float, z = 0.0 as float)
        end sub
        function getIndex(index as integer) as float
        end function
        function setFrom(b as object) as object
        end function
        function add(v as object) as object
        end function
        function equals(v as object) as boolean
        end function
        sub plusEquals(v as object)
        end sub
        function subtract(v as object) as object
        end function
        sub minusEquals(v as object)
        end sub
        function negative() as object
        end function
        function flipX() as object
        end function
        function flipY() as object
        end function
        function scale(r as float) as object
        end function
        sub scaleEquals(r as float)
        end sub
        function multiply(v as object) as object
        end function
        sub multEquals(v as object)
        end sub
        function dotProduct(v as object) as float
        end function
        function divide(r as float) as object
        end function
        ' Makes a copy of this vector
        '
        ' @return {Vector}
        function copy() as object
        end function
        function crossProduct(v as object) as object
        end function
        ' Gets the square of the length of a vector
        '
        ' @return {float}
        function norm() as float
        end function
        ' Gets the length of a vector
        '
        ' @return {float}
        function length() as float
        end function
        function normalize() as object
        end function
        function getNormalizedCopy() as object
        end function
        function cint() as object
        end function
        function toStr() as string
        end function
        function toArray() as object
        end function
        function isParallel(v as object) as boolean
        end function
        function isZero() as boolean
        end function
    end class
    function VectorIdentity() as object
    end function
    ' @param {float} scale_x - horizontal scale
    ' @param {dynamic} [scale_y=invalid] - vertical scale, or if invalid, use the horizontal scale as vertical scale
    function createScaleVector(scale_x as float, scale_y = invalid as dynamic, scale_z = invalid as dynamic) as object
    end function
    function distanceFromPlane(planePoint as object, planeNormal as object, targetPoint as object) as float
    end function
    function midPointBetweenPoints(a as object, b as object) as object
    end function
    function getBounds(points as object) as object
    end function
    function getBoundingCubePoints(points as object) as object
    end function
    function vectorArraysEqual(a = [] as object, b = [] as object) as object
    end function
    function vectorArrayCopy(a = [] as object) as object
    end function
end namespace
