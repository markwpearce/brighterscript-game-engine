' Much of this code is modified/translated from https://github.com/pgliaskovitis/scratch-a-pixel
namespace BGE.Math
    function isFloatArray44(x as dynamic) as boolean
    end function
    function getFloat44Identity() as object
    end function
    sub fillFloat44(dest as object, src as object)
    end sub
    class Matrix44
        public mat as object
        sub new(x00 = invalid as dynamic, x01 = invalid, x02 = invalid, x03 = invalid, x10 = invalid, x11 = invalid, x12 = invalid, x13 = invalid, x20 = invalid = invalid, x21 = invalid, x22 = invalid, x23 = invalid, x30 = invalid, x31 = invalid, x32 = invalid, x33 = invalid)
        end sub
        function copy() as object
        end function
        function setFrom(b as object) as object
        end function
        function equals(b as object) as boolean
        end function
        function multiply(operand as object) as object
        end function
        ' Returns the transposed version of this Matrix
        '
        ' @return {Matrix44}
        function transposed() as object
        end function
        '  This method needs to be used for point-matrix multiplication. Keep in mind
        '  we don't make the distinction between points and vectors at least from
        '  a programming point of view, as both (as well as normals) are declared as Vec3.
        '  However, mathematically they need to be treated differently. Points can be translated
        '  when translation for vectors is meaningless. Furthermore, points are implicitly
        '  be considered as having homogeneous coordinates. Thus the w coordinates needs
        '  to be computed and to convert the coordinates from homogeneous back to Cartesian
        '  coordinates, we need to divided x, y z by w.
        '  The coordinate w more often than not equals 1, but it can be different than
        '  1 especially when the matrix is projective matrix (perspective projection matrix).
        function multVecMatrix(srcVect as object) as object
        end function
        '  This method needs to be used for vector-matrix multiplication. Look at the differences
        '  with the previous method (to compute a point-matrix multiplication). We don't use
        '  the coefficients in the matrix that account for translation (x[3][0], x[3][1], x[3][2])
        '  and we don't compute w.
        function multDirMatrix(srcVect as object) as object
        end function
        ' Compute the inverse of the matrix using the Gauss-Jordan (or reduced row) elimination method.
        ' We didn't explain in the lesson on Geometry how the inverse of matrix can be found. Don't
        ' worry at this point if you don't understand how this works. But we will need to be able to
        ' compute the inverse of matrices in the first lessons of the "Foundation of 3D Rendering" section,
        ' which is why we've added this code. For now, you can just use it and rely on it
        ' for doing what it's supposed to do. If you want to learn how this works though, check the lesson
        ' on called Matrix Inverse in the "Mathematics and Physics of Computer Graphics" section.
        function inverse() as object
        end function
        ' Set current matrix to its inverse
        sub invert()
        end sub
        function toStr() as string
        end function
    end class
    function Matrix44Identity() as object
    end function
    function lookAt(from as object, lookTo as object) as object
    end function
    function orthographicMatrix(top as float, bottom as float, left as float, right as float, far as float, near as float) as object
    end function
    function getScaleMatrix(scale as object) as object
    end function
    function getRotationMatrix(rotation as object) as object
    end function
    function getTranslationMatrix(position as object) as object
    end function
    function getTransformationMatrix(position as object, rotation as object, scale as object) as object
    end function
end namespace
