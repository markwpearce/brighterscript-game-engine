' @module BGE
namespace BGE
    ' Colliders are attached to GameEntities and when two colliders intersect, it triggers the onCollision() method in
    ' the GameEntity
    class Collider
        ' The type of this collider - should be defined in sub classes (eg. "circle", "rectangle")
        public colliderType as string
        ' Name this collider will be identified by
        public name as string
        ' Does this collider trigger onCollision() ?
        public enabled as boolean
        ' Offset from the GameEntity it is attached to
        public offset as object
        ' Bitflag for collision detection: this collider is in this group - https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsprite.md#setmemberflagsflags-as-integer-as-void
        public memberFlags as integer
        ' Bitflag for collision detection: this collider will only collider with colliders in this group - https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsprite.md#setcollidableflagsflags-as-integer-as-void
        public collidableFlags as integer
        ' Used internal to Game - should not be modified manually
        public compositorObject as dynamic
        ' Colliders can be tagged with any number of tags so they can be easily identified (e.g. "enemy", "wall", etc.)
        public tagsList as dynamic
        ' Creates a new Collider
        '
        ' @param {string} colliderName - the name this collider will be identified by
        ' @param {object} [args={}] - additional properties to be added to this collider
        sub new(colliderName as string, args = {} as object)
        end sub
        ' Sets up this collider to be associated with a given game and entity
        '
        ' @param {object} game - the game this collider is used by
        ' @param {string} entityName - name of the entity that owns this collider
        ' @param {string} entityId - id of the entity that owns this collider
        ' @param {BGE.Math.Vector} entityPosition - entity's position
        sub setupCompositor(game as object, entityName as string, entityId as string, entityPosition as object)
        end sub
        ' Refreshes the collider.
        ' Called every frame by the GameEngine.
        ' Should be overrided by sub classes if they have specialized collision set ups (e.g. circle, rectangle).
        '
        sub refreshColliderRegion()
        end sub
        ' Moves the compositor to the new x,y position - called from Game when the entity it is attached to moves
        '
        ' @param {BGE.Math.Vector} entityPosition
        sub adjustCompositorObject(entityPosition as object)
        end sub
        ' Helper function to draw an outline around the collider
        '
        ' @param {object} draw2d
        ' @param {BGE.Math.Vector} position
        ' @param {integer} [color=&hFF0000FF]
        sub debugDraw(draw2d as object, position as object, color = &hFF0000FF as integer, addName = false as boolean, font = invalid)
        end sub
    end class
end namespace
