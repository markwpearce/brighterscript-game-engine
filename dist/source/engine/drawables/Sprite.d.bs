' @module BGE
namespace BGE
    class SpriteAnimation
        ' Name of the animation
        public name as string
        ' Frames per second the animation should play at
        public frameRate as integer
        ' Array of the regions of the each cell of this animation
        public frameList as object
        ' Play mode for the sprite: loop, forward, reverse, pingpong
        public playMode as string
        '
        ' CReate a new SpriteAnimation
        '
        ' @param {string} name Name of the animation
        ' @param {object} frameList Wither an array of cell indexes, or an object {startFrame, frameCount}
        ' @param {integer} frameRate Frames per second the animation should play at
        ' @param {string} [playMode="loop"] Play mode for the sprite: loop, forward, reverse, pingpong
        sub new(name as string, frameList as object, frameRate as integer, playMode = "loop" as string)
        end sub
        private sub setFrameList(frameList as object)
        end sub
    end class
    class Sprite extends BGE.AnimatedImage
        ' roBitmap to pick cells from
        public spriteSheet as object
        ' Width of each animation cell in the sprite image in pixels
        public cellWidth as integer
        ' Height of each animation cell in the sprite image in pixels
        public cellHeight as integer
        ' Lookup map of animation name -> SpriteAnimation object
        public animations as object
        ' The current animation being played
        public activeAnimation as object
        function new(owner as object, canvasBitmap as object, spriteSheet as object, cellWidth as integer, cellHeight as integer, args = {} as object)
        end function
        private sub setCellRegions()
        end sub
        ' Apply a pre-translation to set the pivot point for the sprite cell
        '
        ' @param {float} x
        ' @param {float} y
        sub applyPreTranslation(x as float, y as float)
        end sub
        function addAnimation(name as string, frameList as object, frameRate as integer, playMode = "loop" as string) as object
        end function
        ' Play an animation from the set of animations in this SpriteSheet
        '
        ' @param {string} animationName
        sub playAnimation(animationName as string)
        end sub
        protected override function getCellDrawIndex() as integer
        end function
    end class
end namespace
