' @module BGE
namespace BGE
    ' Every thing (character, player, object, etc) in the game should extend this class.
    ' This class has a number of empty methods that are designed to be overridden in subclasses.
    ' For example, override `onInput()` to handle input event, and `onUpdate()` to handle updating each frame
    class GameEntity
        '-----Constants-----
        ' Constant - name of this Entity
        public name as string
        ' Constant - Unique Id
        public id as string
        private game as object
        ' -----Variables-----
        ' Is this GameEntity enabled
        public enabled as boolean
        ' Does this entity persist across room changes?
        public persistent as boolean
        ' When the game is paused, does this entity pause too?
        public pauseable as boolean
        ' position of where this entity is in game world
        public position as object
        ' Speed of this entity
        public velocity as object
        ' Rotation of entity - applies to all images
        public rotation as object
        ' Scale of entity - applies to all images
        public scale as object
        ' The colliders for this entity by name
        public colliders as object
        ' The array of images to draw for this entity
        public images as object
        ' Associative array of images by name
        public imagesByName as object
        ' Game Entities can be tagged with any number of tags so they can be easily identified (e.g. "enemy", "wall", etc.)
        public tagsList as object
        ' The Current Transformation Matrix
        public transformationMatrix as object
        public motionChecker as object
        private hasDrawnDebug as boolean
        ' Creates a new GameEntity
        '
        ' @param {Game} game - The game engine that this entity is going to be assigned to
        ' @param {object} [args={}] Any extra properties to be added to this entity
        function new(game as object, args = {} as object)
        end function
        ' Is this still a valid entity?
        '
        ' @return {boolean} - true if still valid
        function isValid() as boolean
        end function
        ' Marks this entity as invalid, so it will be cleared/destroyed at the end of the frame
        private sub invalidate()
        end sub
        ' Method to be called when this entity is added to a Game.
        ' Override in subclass
        '
        ' @param {object} args
        sub onCreate(args as object)
        end sub
        ' Method for handling any updates based on time since previous frame
        '
        ' @param {float} deltaTime - milliseconds since last frame
        sub onUpdate(deltaTime as float)
        end sub
        ' Method for processing all collisions
        '
        ' @param {Collider} collider - the collider of this entity that collided
        ' @param {Collider} otherCollider - the collider of the other entity in the collision
        ' @param {GameEntity} otherEntity - the entity that owns the other collider
        sub onCollision(collider as object, otherCollider as object, otherEntity as object)
        end sub
        ' Method called each frame before drawing any images of this entity
        '
        ' @param {renderer} Renderer - the Renderer images will be drawn to
        sub onDrawBegin(renderer as object)
        end sub
        ' Method called each frame after drawing all images of this entity
        '
        ' @param {Renderer} canvas - the Renderer images were drawn to
        sub onDrawEnd(renderer as object)
        end sub
        ' Method to process input per frame
        '
        ' @param {GameInput} input - GameInput object for the last frame
        sub onInput(input as object)
        end sub
        ' Method to process an ECP keyboard event
        ' @see  https://developer.roku.com/en-ca/docs/developer-program/debugging/external-control-api.md
        '
        ' @param {integer} char
        sub onECPKeyboard(char as integer)
        end sub
        ' Method to process an External Control Protocol event
        ' @see  https://developer.roku.com/en-ca/docs/references/brightscript/events/roinputevent.md
        '
        ' @param {object} data
        sub onECPInput(data as object)
        end sub
        ' Method to handle audio events
        ' @see  https://developer.roku.com/en-ca/docs/references/brightscript/events/roaudioplayerevent.md
        '
        ' @param {object} msg - roAudioPlayerEvent
        sub onAudioEvent(msg as object)
        end sub
        ' Called when the game pauses
        '
        sub onPause()
        end sub
        ' Called when the game unpauses
        '
        ' @param {integer} pauseTimeMs - The number of milliseconds the game was paused
        sub onResume(pauseTimeMs as integer)
        end sub
        ' Called on url event
        ' @see  https://developer.roku.com/en-ca/docs/references/brightscript/events/rourlevent.md
        '
        ' @param {object} msg - roUrlEvent
        sub onUrlEvent(msg as object)
        end sub
        ' General purpose event handler for in-game events.
        '
        ' @param {string} eventName - Event name that describes the event type
        ' @param {object} data - Any extra data to go along with the event
        sub onGameEvent(eventName as string, data as object)
        end sub
        ' Method called when the current room changes.
        ' This method is only called when the entity is marked as `persistant`,
        ' otherwise entities are destroyed on room changes.
        '
        ' @param {Room} newRoom - The next room
        sub onChangeRoom(newRoom as object)
        end sub
        ' Method called when this entity is destroyed
        '
        sub onDestroy()
        end sub
        ' Adds a circle collider to this entity
        '
        ' @param {string} colliderName - Name of the collider (only one collider with the same name can be added)
        ' @param {float} radius - radius of the circle
        ' @param {float} [offset_x=0] - horizontal offset from entity position of centre of the circle
        ' @param {float} [offset_y=0] - vertical offset from entity position of centre of the circle
        ' @param {boolean} [enabled=true] - is this collider enabled?
        ' @return {object}  - the collider that was added, or `invalid` if it could not be added
        function addCircleCollider(colliderName as string, radius as float, offset_x = 0 as float, offset_y = 0 as float, enabled = true as boolean) as object
        end function
        ' Adds a rectangle collider to this entity
        '
        ' @param {string} colliderName - Name of the collider (only one collider with the same name can be added)
        ' @param {float} width - Width of rectangle
        ' @param {float} height - Height of rectangle
        ' @param {float} [offset_x=0] - horizontal offset from entity position of top left point of rectangle
        ' @param {float} [offset_y=0] - vertical offset from entity position of top left point of rectangle
        ' @param {boolean} [enabled=true] - is this collider enabled?
        ' @return {object}  - the collider that was added, or `invalid` if it could not be added
        function addRectangleCollider(colliderName as string, width as float, height as float, offset_x = 0 as float, offset_y = 0 as float, enabled = true as boolean) as object
        end function
        ' Adds a collider that has already been constructed
        '
        ' @param {Collider} collider - the collider to add  (only one collider with the same name can be added)
        ' @return {Collider}  - the collider that was added, or `invalid` if it could not be added
        function addCollider(collider as object) as object
        end function
        ' Gets a collider based on its name
        '
        ' @param {string} colliderName - The name of the collider to find
        ' @return {Collider} - the collider (if found) otherwise `invalid`
        function getCollider(colliderName as string) as object
        end function
        ' Removes a collider by its name
        '
        ' @param {string} colliderName - the name of the collider to remove
        sub removeCollider(colliderName as string)
        end sub
        ' Remove all colliders from this entity
        '
        sub clearAllColliders()
        end sub
        ' Adds a basic image (non-animated) to be drawn for this entity
        '
        ' @param {string} imageName - Name of the image
        ' @param {object} region - an `roRegion` of a bitmap to draw
        ' @param {object} [args={}] - any extra properties to set (e.g. offset_x, offset_y, rotation, scale_x, scale_y, etc.)
        ' @param {integer} [insertPosition=-1] - the position/order in the images array where the image should be added (defaults to being added at the end)
        ' @return {Image} - The image object that was added, or `invalid` if there was an error
        function addImage(imageName as string, region as object, args = {} as object, insertPosition = - 1 as integer) as object
        end function
        ' Adds a animated image to be drawn for this entity. Animated images cycle through regions of a bitmap (e.g. spritesheet)
        '
        ' @param {string} imageName - Name of the image
        ' @param {object} regions - an array of `roRegion` of a bitmap to draw
        ' @param {object} [args={}] - any extra properties to set (e.g. offset_x, offset_y, rotation, scale_x, scale_y, etc.)
        ' @param {integer} [insertPosition=-1] - the position/order in the images array where the image should be added (defaults to being added at the end)
        ' @return {AnimatedImage} - The image object that was added, or `invalid` if there was an error
        function addAnimatedImage(imageName as string, regions as object, args = {} as object, insertPosition = - 1 as integer) as object
        end function
        '
        ' @param {object} regions - an array of `roRegion` of a bitmap to draw
        ' Adds a Sprite to be drawn for this entity. Sprites can have specific animations configured buy choosing series of cells from a sprite sheet
        '
        ' @param {string} imageName - Name of the image
        ' @param {object} bitmap - the bitmap object to use for teh SpriteSheet (e.g response from game.getBitmap("bitmap_name"))
        ' @param {integer} cellWidth - the height in pixels of a dingle cell in the sprite
        ' @param {integer} cellHeight - the height in pixels of a dingle cell in the sprite
        ' @param {object} [args={}] - any extra properties to set (e.g. offset_x, offset_y, rotation, scale_x, scale_y, etc.)
        ' @param {integer} [insertPosition=-1] - the position/order in the images array where the image should be added (defaults to being added at the end)
        ' @return {Sprite} - The image object that was added, or `invalid` if there was an error
        function addSprite(imageName as string, spriteSheet as object, cellWidth as integer, cellHeight as integer, args = {} as object, insertPosition = - 1 as integer) as object
        end function
        ' Adds any Image object to this entity
        '
        ' @param {string} imageName - Name of the image
        ' @param {Drawable} drawableObject - The image to be added
        ' @param {integer} [insertPosition=-1] - the position/order in the images array where the image should be added (defaults to being added at the end)
        ' @return {Drawable} - The image object that was added, or `invalid` if there was an error
        function addImageObject(imageName as string, drawableObject as object, insertPosition = - 1 as integer) as object
        end function
        ' Gets an image by its name from the lookup table
        '
        ' @param {string} imageName - Name of image to get
        ' @return {Drawable}
        function getImage(imageName as string) as object
        end function
        ' Removes an image from the entity
        '
        ' @param {string} imageName - Name of image to remove
        sub removeImage(imageName as string)
        end sub
        sub updateTransformationMatrix()
        end sub
        function movedLastFrame() as boolean
        end function
        ' TODO: work on statics
        '
        ' @param {string} staticVariableName
        ' @return {dynamic}
        function getStaticVariable(staticVariableName as string) as dynamic
        end function
        ' TODO: work on statics
        '
        ' @param {string} staticVariableName
        ' @param {dynamic} staticVariableValue
        sub setStaticVariable(staticVariableName as string, staticVariableValue as dynamic)
        end sub
        ' TODO: work on Interfaces
        '
        ' @param {string} interfaceName
        sub addInterface(interfaceName as string)
        end sub
        ' TODO: work on Interfaces
        '
        ' @param {string} interfaceName
        ' @return {boolean}
        function hasInterface(interfaceName as string) as boolean
        end function
        ' Draws the entity's axes and/or its name
        sub debugDraw(renderObj as object, drawAxes = false, drawName = false)
        end sub
    end class
end namespace
