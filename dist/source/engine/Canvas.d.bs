' @module BGE
namespace BGE
    ' Contains a roku roBitmap which all game objects get drawn to.
    class Canvas
        ' bitmap GameEntity images get drawn to
        public bitmap as object
        ' Position offset from screen coordinates (z value ignored)
        public offset as object
        ' Scale (z value ignored)
        public scale as object
        ' Renderer for this canvas
        public renderer as object
        private game as object
        ' Creates a Canvas object and bitmap
        '
        ' @param {integer} canvasWidth - width of canvas
        ' @param {integer} canvasHeight - height of canvas
        sub new(game as object, canvasWidth as integer, canvasHeight as integer) as void
        end sub
        ' Changes the size of the canvas
        '
        ' @param {integer} canvasWidth - width of canvas
        ' @param {integer} canvasHeight - height of canvas
        sub setSize(canvasWidth as integer, canvasHeight as integer) as void
        end sub
        sub setBitmap(bitmap as object)
        end sub
        ' Clears the canvas to the given background color
        '
        ' @param {integer} color
        sub clear(color as integer)
        end sub
        ' Gets the offset of the canvas from the screen
        '
        ' @return {BGE.Math.Vector} - Position offset
        function getOffset() as object
        end function
        ' Gets the scale of the canvas
        '
        ' @return {BGE.Math.Vector} - Scale as object
        function getScale() as object
        end function
        ' Sets the offset of the canvase.
        ' This is as Float to allow incrementing by less than 1 pixel, it is converted to integer internally
        '
        '
        ' @param {float} x - x offset
        ' @param {float} y - y offset
        sub setOffset(x as float, y as float)
        end sub
        ' Sets the scale of the canvas
        '
        ' @param {float} scale_x - horizontal scale
        ' @param {dynamic} [scale_y=invalid] - vertical scale, or if invalid, use the horizontal scale as vertical scale
        sub setScale(scale_x as float, scale_y = invalid as dynamic)
        end sub
        ' Gets the width of the underlying bitmap
        '
        ' @return {integer}
        function getWidth() as integer
        end function
        ' Gets the height of the underlying bitmap
        '
        ' @return {integer}
        function getHeight() as integer
        end function
    end class
end namespace
