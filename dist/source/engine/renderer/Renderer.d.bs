namespace BGE
    ' Wrapper for Draw2D calls, so that we can keep track of how much is being drawn per frame
    class Renderer
        public nextSceneObjectId as integer
        ' Frame rate target - the game will reduce quality if this target is not met
        protected minimumFrameRateTarget as integer
        protected onlyDrawWhenInFrame as boolean
        private drawCallsLastFrame as integer
        private activeDebugCells as integer
        private debugCellSize as integer
        private debugCellStart as object
        private drawDebugCells as boolean
        private draw2d as object
        private sceneObjects as object
        public camera as object
        public triangleCache as object
        private game as object
        private maxBitmapWidth as integer
        private maxBitmapHeight as integer
        sub new(game as object, draw2d as object, cam = invalid as object)
        end sub
        sub resetDrawCallCounter()
        end sub
        sub addSceneObject(sceneObj as object)
        end sub
        sub removeSceneObject(sceneObj as object)
        end sub
        private sub updateSceneObjects()
        end sub
        sub setupCameraForFrame()
        end sub
        sub drawScene()
        end sub
        sub onSwapBuffers()
        end sub
        function worldPointToCanvasPoint(pWorld as object) as object
        end function
        function drawLine(x as float, y as float, endX as float, endY as float, rgba as integer) as boolean
        end function
        function drawLineTo(draw2D as object, x as float, y as float, endX as float, endY as float, rgba as integer) as boolean
        end function
        function drawSquare(x as float, y as float, sideLength as float, rgba as integer) as boolean
        end function
        function drawSquareTo(draw2D as object, x as float, y as float, sideLength as float, rgba as integer) as boolean
        end function
        function drawRectangle(x as float, y as float, width as float, height as float, rgba as integer) as boolean
        end function
        function drawRectangleTo(draw2D as object, x as float, y as float, width as float, height as float, rgba as integer) as boolean
        end function
        ' Draws text to the screen
        '
        ' @param {string} text the test to display
        ' @param {integer} x
        ' @param {integer} y
        ' @param {integer} [color=-1] RGBA color to use
        ' @param {object} [font=invalid] Font object to use (uses default font if none provided)
        ' @param {string} [horizAlign="left"] Horizontal Alignment - "left", "right" or "center"
        ' @param {string} [vertAlign="left"] Vertical Alignment - "top", "bottom" or "center"
        function drawText(text as string, x as integer, y as integer, color = - 1 as integer, font = invalid as object, horizAlign = "left" as string, vertAlign = "top" as string) as boolean
        end function
        ' Draws text to a canvas
        '
        ' @param {string} text the test to display
        ' @param {integer} x
        ' @param {integer} y
        ' @param {integer} [color=-1] RGBA color to use
        ' @param {object} [font=invalid] Font object to use (uses default font if none provided)
        ' @param {string} [horizAlign="left"] Horizontal Alignment - "left", "right" or "center"
        ' @param {string} [vertAlign="left"] Vertical Alignment - "top", "bottom" or "center"
        function drawTextTo(draw2D as object, text as string, x as integer, y as integer, color = - 1 as integer, font = invalid as object, horizAlign = "left" as string, vertAlign = "top" as string) as boolean
        end function
        ' NOTE: This function is unsafe! It creates an roBitmap of the required size to be able to both scale and rotate the drawing, this action requires free video memory of the appropriate amount.
        function drawScaledAndRotatedObject(x as float, y as float, scaleX as float, scaleY as float, theta as float, drawable as object, rgba = - 1 as integer, rotateAroundX = 0, rotateAroundY = 0) as boolean
        end function
        function drawScaledAndRotatedObjectTo(draw2D as object, x as float, y as float, scale_x as float, scale_y as float, theta as float, drawable as object, color = - 1 as integer, rotateAroundX = 0, rotateAroundY = 0) as boolean
        end function
        function drawPinnedCorners(cornerPoints as object, drawableRegion as object, isMirror = false as boolean, color = - 1 as integer) as boolean
        end function
        function drawRotatedImageWithCenterTo(draw2D as object, srcRegion as object, center as object, theta as float, translation = BGE_Math_Vector() as object) as boolean
        end function
        function makeIntoTriangle(srcRegionWithId as object, points as object, makeAcute = false, useCache = false) as object
        end function
        function drawBitmapTriangleTo(draw2D as object, srcRegionWithId as object, srcPoints as object, destPoints as object) as boolean
        end function
        private function getScalesForTriangleMapping(srcTriangle as object, destTriangle as object) as object
        end function
        ' There can be problems transforming a source triangle to a destination triangle when they are obtuse and the longest sides don't match up
        ' This function will scale a source triangle along the axis of its longest side so that it is an acute-triangle
        private function scaleTriangleToBeAcuteTriangle(srcTriangle as object) as object
        end function
        private function rotateAcuteTriangleForDesiredOrigin(srcTriangle as object, indexForOrigin as integer) as object
        end function
        function drawPinnedCornersTo(draw2D as object, cornerPoints as object, drawableRegion as object, isMirror = false as boolean, color = - 1 as integer) as boolean
        end function
        function drawCircleOutline(line_count as integer, x as float, y as float, radius as float, rgba as integer) as boolean
        end function
        function drawRectangleOutline(x as float, y as float, width as float, height as float, rgba as integer) as boolean
        end function
        function drawPolygonOutline(pointsArray as object, colorRgba as integer) as boolean
        end function
        function drawPolygonOutlineTo(draw2d as object, pointsArray as object, colorRgba as integer) as boolean
        end function
        function drawObject(x as integer, y as integer, src as object, rgba = - 1 as integer) as boolean
        end function
        function drawObjectTo(draw2d as object, x as integer, y as integer, src as object, rgba = - 1 as integer) as boolean
        end function
        function drawScaledObject(x as integer, y as integer, scaleX as float, scaleY as float, src as object) as boolean
        end function
        function drawScaledObjectTo(draw2d as object, x as integer, y as integer, scaleX as float, scaleY as float, src as object) as boolean
        end function
        function drawRotatedObject(x as integer, y as integer, theta as float, src as object) as boolean
        end function
        function drawRotatedObjectTo(draw2d as object, x as integer, y as integer, theta as float, src as object) as boolean
        end function
        function drawRegion(regionToDraw as object, x as float, y as float, scaleX = 1 as float, scaleY = 1 as float, rotation = 0 as float, RGBA = - 1 as integer) as boolean
        end function
        function drawRegionTo(canvasDrawTo as object, regionToDraw as object, x as float, y as float, scaleX = 1 as float, scaleY = 1 as float, rotation = 0 as float, RGBA = - 1 as integer) as boolean
        end function
        function drawTriangle(points as object, x as float, y as float, rgba as integer) as boolean
        end function
        function drawTriangleTo(canvasDrawTo as object, points as object, x as float, y as float, rgba as integer) as boolean
        end function
        function drawPolygon(points as object, x as float, y as float, rgba as integer) as boolean
        end function
        function drawPolygonTo(canvasDrawTo as object, points as object, x as float, y as float, rgba as integer) as boolean
        end function
        function getCanvasSize() as object
        end function
        function getCanvasCenter() as object
        end function
        private function shouldDraw(x as float, y as float, width as float, height as float, rotation = 0 as float) as boolean
        end function
        private function shouldDrawTo(draw2d as object, x as float, y as float, width as float, height as float, rotation = 0 as float) as boolean
        end function
        ' Checks to see if a rectangle will be in a Draw2d Canvas
        '
        ' @param {object} draw2d
        ' @param {float} x
        ' @param {float} y
        ' @param {float} width
        ' @param {float} height
        ' @return {boolean} true if this rectangle overlaps with the canvas
        function isInsideCanvas(draw2d as object, x as float, y as float, width as float, height as float, rotation = 0 as float) as boolean
        end function
        function drawTrianglePoints(points as object, size = 5 as integer) as boolean
        end function
        function drawTrianglePointsTo(draw2dRegion as object, points as object, size = 5 as integer) as boolean
        end function
        sub addDebugCell(region as object, text = "" as string)
        end sub
    end class
end namespace
