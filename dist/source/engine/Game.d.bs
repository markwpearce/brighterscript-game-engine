' @module BGE
namespace BGE
    ' Main Game Engine class which runs everything
    ' The main game loop is as follows:
    ' 1. Update - For each GameEntity:
    '   - Process Input from roku remote
    '   - Process Audio Events (https://developer.roku.com/en-ca/docs/references/brightscript/events/roaudioplayerevent.md)
    '   - Process ECP input (https://developer.roku.com/en-ca/docs/developer-program/debugging/external-control-api.md)
    '   - Process URL events (https://developer.roku.com/en-ca/docs/references/brightscript/events/rourlevent.md)
    '   - Runs the Entity's onUpdate() function
    '   - Moves Entity based on velocity
    ' 2. Collisions - For each GameEntity:
    '   - Run Entity's onPreCollision() function
    '   - For any collisions, runs Entity's onCollision() function
    '   - Runs entity's onPostCollision() function
    ' (At any time, the Entity in question may Delete() itself. Before every entity interaction, the entity is checked to make sure it is still valid
    ' in case it was deleted in the last interaction)
    '
    ' 3. Draw - For each GameEntity, sorted by zIndex
    '   - Runs the Entity onDrawBegin() function
    '   - For each drawable in the Entity, run the draw() function
    '   - Run the Entity onDrawEnd() function
    '
    ' 4. Draw all debug items in game space (e.g. colliders, screen safe zones, etc).
    '
    ' 5. UI - For the tree of widgets in the UI Container
    '    - Run onUpdate()
    '    - Run draw()
    '
    ' 6. Debug UI - Draw all debug windows in the tree of the Debug UI
    '
    class Game
        ' ****BEGIN - For Internal Use, Do Not Manually Alter****
        private debugging as dynamic
        private canvas_is_screen as boolean
        private background_color as dynamic
        private running as boolean
        private paused as boolean
        private sortedEntities as object
        private buttonHeld as dynamic
        private buttonHeldTime as integer
        private inputEntityId as string
        private currentInputEntityId as dynamic
        private dt as integer
        private totalRunTime as integer
        private FakeDT as dynamic
        private dtTimer as dynamic
        private pauseTimer as dynamic
        private buttonHeldTimer as dynamic
        private garbageCollectionTimer as dynamic
        private currentID as integer
        private shouldUseIntegerMovement as boolean
        private enableAudioGuideSuppression as boolean
        private emptyBitmap as dynamic
        private device as dynamic
        private urlTransfers as dynamic
        private url_port as dynamic
        private ecp_input_port as dynamic
        private ecp_input as dynamic
        private compositor as dynamic
        private filesystem as dynamic
        private screen_port as dynamic
        private audioPlayer as dynamic
        private music_port as dynamic
        private fontRegistry as dynamic
        private screen as object
        private canvas as object
        private nextGameEntityId as integer
        private secondsBetweenGarbageCollection as integer
        private lastGarbageCollection as object
        private roomChangedThisFrame as boolean
        private roomChangeDetails as object
        ' ****END - For Internal Use, Do Not Manually Alter****
        ' Reference to the current room in play
        public currentRoom as object
        ' Any special arguments for the current room
        public currentRoomArgs as object
        ' All of the GameEntities <entityName> => GameEntity[]
        public Entities as object
        ' All static variables for a given object type
        public Statics as object
        ' The room definitions by name (the room creation functions)
        public Rooms as object
        ' The interface definitions by name
        public Interfaces as object
        ' The loaded bitmaps by name
        public Bitmaps as object
        ' The loaded sounds by name
        public Sounds as object
        ' The loaded fonts by name
        public Fonts as object
        ' Container for all UI
        private gameUi as object
        ' Container for Debug UI
        private debugUi as object
        ' Constructor for GameEngine
        '
        ' @param {integer} canvas_width - Width of the canvas the game is drawn to
        ' @param {integer} canvas_height - Height of the canvas the game is drawn to
        ' @param {boolean} [canvas_as_screen_if_possible=false] - If true, the game will draw to the roScreen directly if the canvas dimensions are the same as the screen dimensions, this improves performance but makes it so you can't do various canvas manipulations (such as screen shake or taking screenshots)
        ' @return {void}
        sub new(canvas_width as integer, canvas_height as integer, canvas_as_screen_if_possible = false as boolean)
        end sub
        sub setCamera(cam as object)
        end sub
        ' Sets up the screen based on canvas dimensions, and screen size
        '
        ' @param {integer} canvas_width
        ' @param {integer} canvas_height
        ' @param {boolean} [canvas_as_screen_if_possible=false]
        ' @return {void}
        private sub setUpScreen(canvas_width as integer, canvas_height as integer, canvas_as_screen_if_possible = false as boolean)
        end sub
        ' Sets up the Ui layer
        '
        ' @param {object} canvas
        private sub setupUi()
        end sub
        ' Finds fonts and registers them
        '
        ' @return {void}
        private sub setUpFonts()
        end sub
        ' Gets the next valid id for a GameEntity
        '
        ' @return {string}
        function getNextGameEntityId() as string
        end function
        ' Starts the game engine.
        ' Run this function after setting up the game.
        '
        ' @return {void}
        public sub Play()
        end sub
        ' Handles all the processing for the entities before drawing
        '
        ' @param {object} universalControlEvents - array of any control events that happened since last frame
        ' @param {object} music_msg - audio player event in last frame
        ' @param {object} ecp_msg  - input event in last frame
        ' @param {object} url_msg - url event in last frame
        ' @return {void}
        private sub processEntitiesPreDraw(universalControlEvents as object, music_msg as object, ecp_msg as object, url_msg as object)
        end sub
        ' Checks if an entity is still valid
        '
        ' @param {GameEntity} entity
        ' @return {boolean}
        private function isValidEntity(entity as object) as boolean
        end function
        ' Deletes an entity from the sortedEntities list by the index if that entity is not valid.
        ' Does not call the onDestroy() method of the entity.
        '
        ' @param {integer} sortedEntitiesIndex
        private sub deleteIfInvalidEntityByIndex(sortedEntitiesIndex as integer)
        end sub
        ' Processes input events and calls the entity's onInput function
        '
        ' @param {GameEntity} entity - the entity to relay input to
        ' @param {object} universalControlEvents - array of control events since last frame
        ' @return {boolean} true if this entity is still valid
        private function processEntityOnInput(entity as object, universalControlEvents as object) as boolean
        end function
        ' Moves an entity based on its velocity
        '
        ' @param {GameEntity} entity
        ' @return {boolean} true if this entity is still valid
        private function processEntityMovement(entity as object) as boolean
        end function
        ' Checks all colliders in an entity with all other colliders and if
        ' there is a collision, will call the entity's onCollsion() function
        '
        ' @param {GameEntity} entity
        ' @return {boolean} true if this entity is still valid
        private function processEntityOnCollision(entity as object) as boolean
        end function
        ' Helper to adjust en entities colliders after movement
        '
        ' @param {GameEntity} entity
        ' @return {boolean} true if this entity is still valid
        private function adjustEntityCompositorObjectPostCollision(entity as object) as boolean
        end function
        ' Draws the Renderer's scene, bookended by calling PreDraw and PostDraw functions on teh active room and entities
        '
        ' @return {void}
        private sub drawEntities()
        end sub
        ' Calls onDrawBegin function
        '
        ' @param {GameEntity} entity
        ' @return {boolean} true if this entity is still valid
        private function processEntityPreDraw(entity as object) as boolean
        end function
        ' Calls onDrawEnd function
        '
        ' @param {GameEntity} entity
        ' @return {boolean} true if this entity is still valid
        private function processEntityPostDraw(entity as object) as boolean
        end function
        ' Ends the Game
        '
        ' @return {void}
        sub End()
        end sub
        ' Pauses the game
        ' Only entities marked as pausable = false will be processed in game loop
        ' For each entity, the onPause() function will be called
        '
        ' @return {void}
        sub Pause()
        end sub
        ' Resumes / unpauses the game
        ' For each entity, the onResume() function will be called, and any image in the entity will have its onResume() called
        '
        ' @return {integer}
        function Resume() as integer
        end function
        ' Is the game paused?
        '
        ' @return {boolean}
        function isPaused() as boolean
        end function
        ' Sets the default background color for the game
        ' Before any entities are drawn, the screen is cleared to this color
        '
        ' @param {integer} color
        ' @return {void}
        sub setBackgroundColor(color as integer)
        end sub
        ' What's the time in seconds since last frame?
        '
        ' @return {float}
        function getDeltaTime() as float
        end function
        ' What's the total time in seconds since ths start
        '
        ' @return {float}
        function getTotalTime() as float
        end function
        ' Gets the current Room/Level the game is using
        '
        ' @return {Room}
        function getRoom() as object
        end function
        ' Gets the bitmap the game is currently drawing to
        '
        ' @return {object}
        function getCanvas() as object
        end function
        ' Gets the screen object
        '
        ' @return {object}
        function getScreen() as object
        end function
        ' Resets the screen
        ' Note: _Important_ This function is here because of a bug with the Roku.
        ' If you ever try to use a component that displays something on the screen aside from roScreen,
        ' such as roKeyboardScreen, roMessageDialog, etc. the screen will flicker after you return to your game
        ' You should always call this method after using a screen that's outside of roScreen in order to prevent this bug.
        '
        ' @return {void}
        sub resetScreen()
        end sub
        ' Gets a 1x1 bitmap image (used for collider compositing)
        '
        ' @return {object} - a 1x1 empty roBitmap
        function getEmptyBitmap() as object
        end function
        ' --------------------------------Begin Ui Functions----------------------------------------
        ' Gets the UI Container to add new UI elements (which get drawn on top off Game Entities)
        '
        ' @return {BGE.Ui.UiContainer} - the container all other UI elements can be added to
        function getUI() as object
        end function
        ' Function to handle all input and updates and draws for UI layer
        '
        ' @param {object} universalControlEvents - array of control events since last frame
        ' @param {object} music_msg - audio player event in last frame
        ' @param {object} ecp_msg  - input event in last frame
        ' @param {object} url_msg - url event in last frame
        private sub processAndDrawUI(universalControlEvents as object, music_msg as object, ecp_msg as object, url_msg as object)
        end sub
        ' Function to handle all input and updates and draws for UI layer
        '
        ' @param {BGE.Ui.UiWidget} - widget to process
        ' @param {object} universalControlEvents - array of control events since last frame
        ' @param {object} music_msg - audio player event in last frame
        ' @param {object} ecp_msg  - input event in last frame
        ' @param {object} url_msg - url event in last frame
        private sub processUiUpdate(uiEntity as object, universalControlEvents as object, music_msg as object, ecp_msg as object, url_msg as object)
        end sub
        ' --------------------------------Begin Debug Functions----------------------------------------
        ' Gets the main debug window to add other debug widgets to
        '
        ' @return {BGE.Debug.DebugWindow} - the container all other Debug UI elements can be added to
        function getDebugUI() as object
        end function
        ' Function to handle all input and updates and draws for Debug UI layer
        '
        ' @param {object} universalControlEvents - array of control events since last frame
        ' @param {object} music_msg - audio player event in last frame
        ' @param {object} ecp_msg  - input event in last frame
        ' @param {object} url_msg - url event in last frame
        private sub processAndDrawDebugUI(universalControlEvents as object, music_msg as object, ecp_msg as object, url_msg as object)
        end sub
        ' Draw Debug Related Items on the game Layer
        '
        ' @return {void}
        private sub drawDebugItems()
        end sub
        ' Draw Debug Related Items on the game Layer
        '
        ' @return {void}
        private sub drawDebugForEntity(entity as object)
        end sub
        ' Set if colliders should be drawn
        '
        ' @param {boolean} enabled
        sub debugDrawColliders(enabled as boolean)
        end sub
        ' Set if Safe Zone should be drawn
        '
        ' @param {boolean} enabled
        sub debugDrawSafeZones(enabled as boolean)
        end sub
        ' Set GameEntity and SceneObject debug view on or off
        '
        ' @param {boolean} enabled
        sub debugDrawEntityDetails(enabled as boolean)
        end sub
        ' Set if Debug UI/Windows should be drawn
        '
        ' @param {boolean} enabled
        ' @param {boolean} drawToScreen Draw the debug UI to the screen instead of the canvas
        sub debugShowUi(enabled as boolean, drawToScreen = false as boolean)
        end sub
        function getDebugValue(debugKey as string)
        end function
        ' Sets the colors for the debug items to be drawn
        ' colors = {colliders: integer, safe_action_zone: integer, safe_title_zone: integer}
        '
        ' @param {object} colors
        sub debugSetColors(colors as object)
        end sub
        ' Limit the frame rate to the given number of frames per second
        '
        ' @param {integer} limit_frame_rate
        sub debugLimitFrameRate(limit_frame_rate as integer)
        end sub
        ' Gets the latest stats from automatic garbage collection
        ' https://developer.roku.com/en-ca/docs/references/brightscript/language/global-utility-functions.md#rungarbagecollector-as-object
        '
        ' @return {object} Stats of garbage collection. Properties: count, orphaned, root
        function getGarbageCollectionStats() as object
        end function
        ' Draw the colliders for the given entity
        '
        ' @param {GameEntity} entity
        ' @param {integer} [color=0]
        private sub drawColliders(entity as object, color = 0 as integer)
        end sub
        ' Draws the safe zones
        '
        ' @return {void}
        private sub drawSafeZones()
        end sub
        ' --------------------------------Begin Raycast Functions----------------------------------------
        ' Performs a raycast from a certain location along a vector to find any colliders on that line
        '
        ' @param {float} sourceX x position of ray start
        ' @param {float} sourceY y position of ray start
        ' @param {float} vectorX x value of vector
        ' @param {float} vectorY y value of vector
        ' @return {object} {collider: collider, entity: entity} of first collider along the vector, or invalid if no collisions
        function raycastVector(sourceX as float, sourceY as float, vectorX as float, vectorY as float) as object
        end function
        ' Performs a raycast from a certain location along a n angle to find any colliders on that line
        '
        ' @param {float} sourceX x position of ray start
        ' @param {float} sourceY y position of ray start
        ' @param {float} angle angle of ray
        ' @return {object} {collider: collider, entity: entity} of first collider along the angle, or invalid if no collisions
        function raycastAngle(sourceX as float, sourceY as float, angle as float) as object
        end function
        ' --------------------------------Begin Object Functions----------------------------------------
        ' Sets up the lookup table of entities for entities with this name
        '
        ' @param {string} entityName
        ' @return {void}
        private sub defineEntity(entityName as string)
        end sub
        ' TODO: work on interfaces
        '
        ' @param {string} interfaceName
        ' @param {callable} interfaceCreationFunction
        ' @return {void}
        sub defineInterface(interfaceName as string, interfaceCreationFunction as Function)
        end sub
        ' Adds a game entity to be processed by the game engine
        ' Only entities that have been added will be part of the game
        ' Calls the entity's onCreate() function with the args provided
        '
        ' @param {GameEntity} entity - the entity to be added
        ' @param {object} [args={}] - arguments to the entity's onCreate() method
        ' @return {GameEntity} the entity that was added
        function addEntity(entity as object, args = {} as object) as object
        end function
        ' Gets an entity by its unique id
        '
        ' @param {string} entityId
        ' @return {GameEntity} the entity with the given id, if found, otherwise invalid
        function getEntityByID(entityId as string) as object
        end function
        ' Gets the first entity with the given name
        '
        ' @param {string} objectName
        ' @return {GameEntity} the entity with the given name, if found, otherwise invalid
        function getEntityByName(objectName as string) as object
        end function
        ' Gets all the entities that match the given name
        '
        ' @param {string} objectName
        ' @return {object} an array with entities with the given name
        function getAllEntities(objectName as string) as object
        end function
        ' TODO: work on interfaces
        '
        ' @param {string} interfaceName
        ' @return {object}
        function getAllEntitiesWithInterface(interfaceName as string) as dynamic
        end function
        ' Destroys an entity and all its colliders
        ' Clears its properties, so images, etc. won't get drawn anymore
        '
        ' @param {GameEntity} entity - the entity to destroy
        ' @param {boolean} [callOnDestroy=true]
        ' @return {void}
        sub destroyEntity(entity as object, callOnDestroy = true as boolean)
        end sub
        ' Destroys all entities with a given name
        '
        ' @param {string} objectName
        ' @param {boolean} [callOnDestroy=true]
        ' @return {void}
        sub destroyAllEntities(objectName as string, callOnDestroy = true as boolean)
        end sub
        ' Gets the number of entities of a given name
        '
        ' @param {string} objectName
        ' @return {integer}
        function entityCount(objectName as string) as integer
        end function
        ' --------------------------------Begin Room Functions----------------------------------------
        ' Defines a room (like a level) in the game
        ' TODO: work on rooms
        '
        ' @param {Room} room
        ' @return {void}
        sub defineRoom(room as object)
        end sub
        function isRoomChanging() as boolean
        end function
        ' Changes the active room to the one with the given name
        ' Calls the room's onCreate() method with the args given
        ' TODO: work on rooms
        '
        ' @param {string} roomName
        ' @param {object} [args={}]
        ' @return {boolean} true if room change was successful
        function changeRoom(roomName as string, args = {} as object) as boolean
        end function
        private sub handleRoomChange()
        end sub
        ' Resets the current room to its state at when it was first created
        '
        ' @return {void}
        sub resetRoom()
        end sub
        ' --------------------------------Begin Bitmap Functions----------------------------------------
        ' Loads an image file (png/jpg) to be used as an image in the game
        '
        ' @param {string} bitmapName - the name this bitmap will be referenced by later
        ' @param {dynamic} path - The path to the bitmap, or an associative array {width: integer, height: integer, alphaEnable:boolean}
        ' @return {boolean} true if image was loaded
        function loadBitmap(bitmapName as string, path as dynamic) as boolean
        end function
        ' Gets a bitmap image (roBitmap) by the name given to it when loadBitmap() was called
        '
        ' @param {string} bitmapName
        ' @return {object}
        function getBitmap(bitmapName as string) as object
        end function
        ' Invalidates a bitmap name, so it can't be loaded again
        '
        ' @param {string} bitmapName
        ' @return {void}
        sub unloadBitmap(bitmapName as string)
        end sub
        ' --------------------------------Begin Font Functions----------------------------------------
        ' Registers a font by its path
        '
        ' @param {string} path
        ' @return {boolean} true if font was registered
        function registerFont(path as string) as boolean
        end function
        ' Loads a font from the registry, and assigns it the given name
        '
        ' @param {string} fontName - the lookup name to assign to this font
        ' @param {string} font - the font to load
        ' @param {integer} size
        ' @param {boolean} italic
        ' @param {boolean} bold
        ' @return {void}
        sub loadFont(fontName as string, font as string, size as integer, italic as boolean, bold as boolean)
        end sub
        ' Unloads a font so it can't be used again
        '
        ' @param {string} fontName
        ' @return {void}
        sub unloadFont(fontName as string)
        end sub
        ' Gets a font object, to be used for writing text to the screen
        ' For example, in BGE.DrawText()
        '
        ' @param {string} fontName
        ' @return {object}
        function getFont(fontName as string) as object
        end function
        ' --------------------------------Begin Canvas Functions----------------------------------------
        ' Scales and positions the current canvas to fit the screen
        '
        ' @return {void}
        sub fitCanvasToScreen()
        end sub
        ' Centers the canvas on the screen
        '
        ' @return {void}
        sub centerCanvasToScreen()
        end sub
        ' --------------------------------Begin Audio Functions----------------------------------------
        ' Plays an audio file at the given path
        ' This is designed for music, where only one file can play at a time.
        '
        ' @param {string} path - the path of the music file
        ' @param {boolean} [loop=false]
        ' @return {boolean} - true if started
        function musicPlay(path as string, loop = false as boolean) as boolean
        end function
        ' Stops the currently playing music file
        '
        ' @return {void}
        sub musicStop()
        end sub
        ' Pauses the currently playing music
        '
        ' @return {void}
        sub musicPause()
        end sub
        ' Resumes / unpauses the current music
        '
        ' @return {void}
        sub musicResume()
        end sub
        ' Loads a sound file from the given path to be played later
        '
        ' @param {string} soundName - the name to assign this sound to, to be referenced later
        ' @param {string} path - the path to load
        ' @return {void}
        sub loadSound(soundName as string, path as string)
        end sub
        ' Plays the given sound
        '
        ' @param {string} soundName - the name of the sound to play
        ' @param {integer} [volume=100] - volume (0-100) to play the sound at
        ' @return {boolean}
        function playSound(soundName as string, volume = 100 as integer) as boolean
        end function
        ' --------------------------------Begin Url Functions----------------------------------------
        ' Creates a new URL Async Transfer object, which is handled by the game loop
        ' Events from this URL transfer will be set to entities via the onUrlEvent() method
        '
        ' @return {object}
        function newAsyncUrlTransfer() as object
        end function
        ' --------------------------------Begin Input Entity Functions----------------------------------------
        ' Set only one entity to receive onInput() calls
        ' Useful for when a menu/pause screen should handle all input
        '
        ' @param {GameEntity} entity
        ' @return {void}
        sub setInputEntity(entity as object)
        end sub
        ' Unset that only one entity will receive onInputCalls()
        '
        ' @return {void}
        sub unsetInputEntity()
        end sub
        ' --------------------------------Begin Game Event Functions----------------------------------------
        ' General purpose event dispatch method
        ' Game entities can listen for events via the onGameEvent() method
        '
        ' @param {string} eventName - identifier for the event, eg. "hit", "win", etc.
        ' @param {object} [data={}] - any data that needs to be be passed with the event
        ' @return {void}
        sub postGameEvent(eventName as string, data = {} as object)
        end sub
    end class
end namespace
