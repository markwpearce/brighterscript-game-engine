namespace BGE.QuickHull
    ' Gets a series of triangles for the convex space defined by an array of {x,y} points
    '
    ' @param {object} pointsArray - array of {x,y} objects
    ' @param {boolean} hull - perform a quick hull operation
    ' @return {object} array of triangles, each is array of 3 {x,y} points
    function getTrianglesFromPoints(pointsArray = [] as object, hull = true as boolean) as object
    end function
    ' Implementation of the QuickHull algorithm for finding convex hull of a set of points
    ' Modified from: https://github.com/claytongulick/quickhull
    ' Original author Clay Gulick
    ' @param {object} pointsArray - array of {x,y} objects
    ' @return {object} the minimal set of points for a convex hull
    function QuickHull(pointsArray = [] as object) as object
    end function
    ' Gets the min and max points in the set along the X axis
    ' modified from https:'github.com/claytongulick/quickhull
    ' @param {Array} pointsArray - An array of {x,y} objects
    ' @return {object} array [ {x,y}, {x,y} ]
    function getMinMaxPoints(pointsArray = [] as object, vertical = false as boolean) as object
    end function
    '
    ' Gets the total width from first point to last point horizontally, and the offset of the first point
    '
    ' @param {object} [pointsArray=[]] array of {x,y} objects
    ' @return {object}
    function getMaxWidthAndHorizontalOffset(pointsArray = [] as object) as object
    end function
    ' Gets the total height from first point to last point vertically, and the offset of the first point
    '
    ' @param {object} [pointsArray=[]] array of {x,y} objects
    ' @return {object} object with {height as float, offset as float}
    function getMaxHeightAndVerticalOffset(pointsArray = [] as object) as object
    end function
    ' Calculates the distance of a point from a line
    ' modified from https:'github.com/claytongulick/quickhull
    ' @param {Array} point - Array [x,y]
    ' @param {Array} line - Array of two points [ [x1,y1], [x2,y2] ]
    ' return {float}
    function distanceFromLine(point as object, line as object) as float
    end function
    ' Determines the set of points that lay outside the line (positive), and the most distal point
    ' Returns: {points: [ [x1, y1], ... ], max: [x,y] ]
    ' @param points
    ' @param line
    function distalPoints(line as object, points as object) as object
    end function
    ' Recursively adds hull segments
    ' @param line
    ' @param points
    '
    sub addSegments(hull as object, line as object, points as object)
    end sub
end namespace
