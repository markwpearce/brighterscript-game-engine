namespace BGE

  class MotionChecker

    protected previousTransform as BGE.Math.Transform = new BGE.Math.Transform()
    movedLastFrame as boolean = true


    ' Is the current transform as given different from the previous?
    '
    ' @param {BGE.Math.Vector} [position=invalid]
    ' @param {BGE.Math.Vector} [rotation=invalid]
    ' @param {BGE.Math.Vector} [scale=invalid]
    ' @return {boolean} True if different from previous
    function check(position = invalid as BGE.Math.Vector, rotation = invalid as BGE.Math.Vector, scale = invalid as BGE.Math.Vector) as boolean
      if m.previousTransform = invalid
        return true
      end if
      if rotation <> invalid and not m.previousTransform.rotation.equals(rotation)
        return true
      end if
      if invalid <> position and not m.previousTransform.position.equals(position)
        return true
      end if
      if invalid <> scale and not m.previousTransform.scale.equals(scale)
        return true
      end if
      return false
    end function


    sub resetMovedFlag()
      m.movedLastFrame = false
    end sub

    sub setTransform(position as BGE.Math.Vector, rotation as BGE.Math.Vector, scale = invalid as BGE.Math.Vector) as boolean
      m.previousTransform.position = position.copy()
      m.previousTransform.rotation = rotation.copy()
      if scale <> invalid
        m.previousTransform.scale = scale.copy()
      end if
      m.movedLastFrame = true
    end sub

    function getPositionDifference(currentPosition as BGE.Math.Vector) as BGE.Math.Vector
      return currentPosition.subtract(m.previousTransform.position)
    end function

    function getRotationDifference(currentRotation as BGE.Math.Vector) as BGE.Math.Vector
      return currentRotation.subtract(m.previousTransform.rotation)
    end function

  end class





end namespace