namespace BGE.Math


  class Vector
    public x as float = 0.0
    public y as float = 0.0
    public z as float = 0.0

    sub new(x = 0.0 as float, y = 0.0 as float, z = 0.0 as float)
      m.x = x * 1.0
      m.y = y * 1.0
      m.z = z * 1.0
    end sub

    function getIndex(index as integer) as float
      if index = 0
        return m.x
      else if index = 1
        return m.y
      else if index = 2
        return m.z
      end if
      return invalid
    end function

    function add(v as Vector) as Vector
      return new Vector(m.x + v.x, m.y + v.y, m.z + v.z)
    end function

    sub plusEquals(v as Vector)
      m.x += v.x
      m.y += v.y
      m.z += v.z
    end sub

    function subtract(v as Vector) as Vector
      return new Vector(m.x - v.x, m.y - v.y, m.z - v.z)
    end function

    sub minusEquals(v as Vector)
      m.x -= v.x
      m.y -= v.y
      m.z -= v.z
    end sub

    function negative() as Vector
      return new Vector(-m.x, -m.y, -m.z)
    end function

    function scale(r as float) as Vector
      return new Vector(m.x * r, m.y * r, m.z * r)
    end function

    sub scaleEquals(r as float)
      m.x *= r
      m.y *= r
      m.z *= r
    end sub

    function multiply(v as Vector) as Vector
      return new Vector(m.x * v.x, m.y * v.y, m.z * v.z)
    end function

    sub multEquals(v as Vector)
      m.x *= v.x
      m.y *= v.y
      m.z *= v.z
    end sub

    function dotProduct(v as Vector) as float
      return m.x * v.x + m.y * v.y + m.z * v.z
    end function

    function divide(r as float) as Vector
      return new Vector(m.x / r, m.y / r, m.z / r)
    end function


    ' Makes a copy of this vector
    '
    ' @return {Vector}
    function copy() as Vector
      return new Vector(m.x, m.y, m.z)
    end function

    function crossProduct(v as Vector) as Vector
      return new Vector(m.y * v.z - m.z * v.y, m.z * v.x - m.x * v.z, m.x * v.y - m.y * v.x)
    end function

    ' Gets the square of the length of a vector
    '
    ' @return {float}
    function norm() as float
      return x * x + y * y + z * z
    end function

    ' Gets the length of a vector
    '
    ' @return {float}
    function length() as float
      return sqr(m.norm())
    end function

    function normalize() as Vector
      n = m.norm()
      if (n > 0)
        factor = 1 / sqr(n)
        x *= factor
        y *= factor
        z *= factor
      end if

      return m
    end function


    function cint() as Vector
      return new Vector(cint(m.x), cint(m.y), cint(m.z))
    end function

    function toString() as string
      return `[${m.x} ${m.y} ${m.z}]`
    end function

  end class


  function VectorIdentity() as Vector
    return new Vector()
  end function
  '
  ' @param {float} scale_x - horizontal scale
  ' @param {dynamic} [scale_y=invalid] - vertical scale, or if invalid, use the horizontal scale as vertical scale

  function createScaleVector(scale_x as float, scale_y = invalid as dynamic, scale_z = invalid as dynamic) as Vector
    result = VectorIdentity()
    if invalid = scale_y
      scale_y = scale_x
    end if
    if invalid = scale_z
      scale_z = scale_x
    end if
    result.x = scale_x
    result.y = scale_y
    result.z = scale_z
    return result
  end function

end namespace
