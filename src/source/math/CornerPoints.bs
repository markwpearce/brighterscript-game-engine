namespace BGE.Math


  class CornerPoints

    topLeft as Vector = BGE.Math.VectorOps.create()
    topRight as Vector = BGE.Math.VectorOps.create()

    bottomLeft as Vector = BGE.Math.VectorOps.create()
    bottomRight as Vector = BGE.Math.VectorOps.create()

    function toArray() as Vector[]
      return [m.topLeft, m.topRight, m.bottomLeft, m.bottomRight]
    end function

    sub setPointByIndex(index as integer, newValue as Vector)
      if index = 0
        BGE.Math.VectorOps.setFrom(m.topLeft, newValue)
      else if index = 1
        BGE.Math.VectorOps.setFrom(m.topRight, newValue)
      else if index = 2
        BGE.Math.VectorOps.setFrom(m.bottomLeft, newValue)
      else if index = 3
        BGE.Math.VectorOps.setFrom(m.bottomRight, newValue)
      end if
    end sub

    function getNormal() as Vector
      topVector = BGE.Math.VectorOps.subtract(m.topRight, m.topLeft)
      downVector = BGE.Math.VectorOps.subtract(m.bottomLeft, m.topLeft)
      crossProd = BGE.Math.VectorOps.crossProduct(topVector, downVector)
      BGE.Math.VectorOps.normalize(crossProd)
      return crossProd
    end function

    function getAvgWidth() as float
      topXDelta = TotalDistance(m.topLeft, m.topRight)
      bottomXDelta = TotalDistance(m.bottomLeft, m.bottomRight)
      avg = average(topXDelta, bottomXDelta)

      return avg
    end function

    function getMaxWidth() as float
      topXDelta = TotalDistance(m.topLeft, m.topRight)
      bottomXDelta = TotalDistance(m.bottomLeft, m.bottomRight)
      maxVal = Max(topXDelta, bottomXDelta)

      return maxVal
    end function


    function getAvgHeight() as float
      leftYDelta = TotalDistance(m.topLeft, m.bottomLeft)
      rightYDelta = TotalDistance(m.topRight, m.bottomRight)
      maxVal = max(leftYDelta, rightYDelta)

      return maxVal
    end function




    function getMaxHeight() as float
      leftYDelta = TotalDistance(m.topLeft, m.bottomLeft)
      rightYDelta = TotalDistance(m.topRight, m.bottomRight)
      avg = average(leftYDelta, rightYDelta)

      return avg
    end function

    function getAvgRotation() as float
      origin = BGE.Math.VectorOps.create()
      piOver4 = BGE.Math.halfPi() / 2

      return -constrainAngle(GetAngle(m.getCenter(), midPointBetweenPoints(m.topRight, m.bottomRight)))
    end function


    function getRotationOfTopLeftBottomRightDiagonal(originalDiagonal = BGE.Math.VectorOps.create(1, 0, 0) as Vector) as float
      origNormal = BGE.Math.VectorOps.getNormalizedCopy(originalDiagonal)
      diagNormal = BGE.Math.VectorOps.getNormalizedCopy(BGE.Math.VectorOps.subtract(m.bottomRight, m.topLeft))
      return -getAngle(origNormal, diagNormal)
    end function

    function getRotationOfTopRightBottomLeftDiagonal(originalDiagonal = BGE.Math.VectorOps.create(1, 0, 0) as Vector) as float
      origNormal = BGE.Math.VectorOps.getNormalizedCopy(originalDiagonal)
      diagNormal = BGE.Math.VectorOps.getNormalizedCopy(BGE.Math.VectorOps.subtract(m.bottomLeft, m.topRight))
      return -getAngle(origNormal, diagNormal)
    end function


    function computeSideLengths() as float[]
      lengths = []
      lengths.push(TotalDistance(m.topLeft, m.topRight))
      lengths.push(TotalDistance(m.topRight, m.bottomRight))
      lengths.push(TotalDistance(m.bottomRight, m.bottomLeft))
      lengths.push(TotalDistance(m.bottomLeft, m.topLeft))
      return lengths
    end function


    function computeDiagonalLengths() as float[]
      tLBrDistance = TotalDistance(m.topLeft, m.bottomRight)
      trBlDistance = TotalDistance(m.topRight, m.bottomLeft)
      return [tLBrDistance, trBlDistance]
    end function


    function getCenter() as Vector
      return midPointBetweenPoints(m.topLeft, m.bottomRight)
    end function


    function getBounds() as Vector[]
      return getBounds(m.toArray())
    end function

    function copy() as CornerPoints
      copiedPoints = new CornerPoints()
      copiedPoints.topLeft = BGE.Math.VectorOps.copy(m.topLeft)
      copiedPoints.topRight = BGE.Math.VectorOps.copy(m.topRight)
      copiedPoints.bottomLeft = BGE.Math.VectorOps.copy(m.bottomLeft)
      copiedPoints.bottomRight = BGE.Math.VectorOps.copy(m.bottomRight)
      return copiedPoints
    end function

    function subtract(vect as Vector) as CornerPoints
      copiedPoints = new CornerPoints()
      copiedPoints.topLeft = BGE.Math.VectorOps.subtract(m.topLeft, vect)
      copiedPoints.topRight = BGE.Math.VectorOps.subtract(m.topRight, vect)
      copiedPoints.bottomLeft = BGE.Math.VectorOps.subtract(m.bottomLeft, vect)
      copiedPoints.bottomRight = BGE.Math.VectorOps.subtract(m.bottomRight, vect)
      return copiedPoints
    end function


    function add(vect as Vector) as CornerPoints
      copiedPoints = new CornerPoints()
      copiedPoints.topLeft = BGE.Math.VectorOps.add(m.topLeft, vect)
      copiedPoints.topRight = BGE.Math.VectorOps.add(m.topRight, vect)
      copiedPoints.bottomLeft = BGE.Math.VectorOps.add(m.bottomLeft, vect)
      copiedPoints.bottomRight = BGE.Math.VectorOps.add(m.bottomRight, vect)
      return copiedPoints
    end function

    function toStr() as string
      return `[${BGE.Math.VectorOps.toStr(m.topLeft)}, ${BGE.Math.VectorOps.toStr(m.topRight)},\n ${BGE.Math.VectorOps.toStr(m.bottomLeft)}, ${BGE.Math.VectorOps.toStr(m.bottomRight)}]`
    end function

  end class
end namespace