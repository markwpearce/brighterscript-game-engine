namespace BGE.Math


  class CornerPoints

    topLeft as Vector = new Vector()
    topRight as Vector = new Vector()

    bottomLeft as Vector = new Vector()
    bottomRight as Vector = new Vector()


    function toArray() as Vector[]
      return [m.topLeft, m.topRight, m.bottomLeft, m.bottomRight]
    end function

    sub setPointByIndex(index as integer, newValue as Vector)
      m.toArray()[index].setFrom(newValue)
    end sub

    function getNormal() as Vector
      topVector = m.topRight.subtract(m.topLeft)
      downVector = m.bottomLeft.subtract(m.topLeft)
      crossProd = topVector.crossProduct(downVector)
      crossProd.normalize()
      return crossProd
    end function

    function getAvgWidth() as float
      topXDelta = TotalDistance(m.topLeft, m.topRight)
      bottomXDelta = TotalDistance(m.bottomLeft, m.bottomRight)
      avg = average(topXDelta, bottomXDelta)

      return avg
    end function

    function getMaxWidth() as float
      topXDelta = TotalDistance(m.topLeft, m.topRight)
      bottomXDelta = TotalDistance(m.bottomLeft, m.bottomRight)
      maxVal = Max(topXDelta, bottomXDelta)

      return maxVal
    end function


    function getAvgHeight() as float
      leftYDelta = TotalDistance(m.topLeft, m.bottomLeft)
      rightYDelta = TotalDistance(m.topRight, m.bottomRight)
      maxVal = max(leftYDelta, rightYDelta)

      return maxVal
    end function




    function getMaxHeight() as float
      leftYDelta = TotalDistance(m.topLeft, m.bottomLeft)
      rightYDelta = TotalDistance(m.topRight, m.bottomRight)
      avg = average(leftYDelta, rightYDelta)

      return avg
    end function

    function getAvgRotation() as float
      origin = new Vector()
      piOver4 = BGE.Math.halfPi() / 2

      return -constrainAngle(GetAngle(m.getCenter(), midPointBetweenPoints(m.topRight, m.bottomRight)))
    end function


    function getRotationOfTopLeftBottomRightDiagonal(originalDiagonal as Vector) as float
      origNormal = originalDiagonal.getNormalizedCopy()
      diagNormal = m.bottomRight.subtract(m.topLeft).getNormalizedCopy()
      ? "getRotationOfTLBRDiagonal: ";origNormal.toStr();" vs "; diagNormal.toStr()
      return -getAngle(origNormal, diagNormal)
    end function

    function getRotationOfTopRightBottomLeftDiagonal(originalDiagonal as Vector) as float
      origNormal = originalDiagonal.getNormalizedCopy()
      diagNormal = m.bottomLeft.subtract(m.topRight).getNormalizedCopy()
      ? "getRotationOfTRBLDiagonal: ";origNormal.toStr();" vs "; diagNormal.toStr()
      return -getAngle(origNormal, diagNormal)
    end function

    function computeDiagonalLengths() as float[]
      tLBrDistance = TotalDistance(m.topLeft, m.bottomRight)
      trBlDistance = TotalDistance(m.topRight, m.bottomLeft)
      return [tLBrDistance, trBlDistance]
    end function


    function getCenter() as Vector
      return midPointBetweenPoints(m.topLeft, m.bottomRight)
    end function


    function toStr() as string
      return `[${m.topLeft.toStr()}, ${m.topRight.toStr()},\n ${m.bottomLeft.toStr()}, ${m.bottomRight.toStr()}]`
    end function

  end class
end namespace