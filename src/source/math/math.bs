' @module BGE
namespace BGE.Math

  function Min(a as float, b as float) as dynamic
    if a <= b
      return a
    end if
    return b
  end function

  function Max(a as float, b as float) as dynamic
    if a >= b
      return a
    end if
    return b
  end function

  function Clamp(number as float, minVal as float, maxVal as float) as dynamic
    if number < minVal
      return minVal
    else if number > maxVal
      return maxVal
    else
      return number
    end if
  end function

  function PI() as float
    return 3.14159265358
  end function

  function halfPI() as float
    return 1.57079632679
  end function

  function Atan2(y as float, x as float) as float
    piValue = PI()
    piOver2 = halfPi()
    if x > 0
      angle = Atn(y / x)
    else if y >= 0 and x < 0
      angle = Atn(y / x) + piValue
    else if y < 0 and x < 0
      angle = Atn(y / x) - piValue
    else if y > 0 and x = 0
      angle = piOver2
    else if y < 0 and x = 0
      angle = (piOver2) * -1
    else
      angle = 0
    end if

    return angle
  end function

  function IsIntegerEven(number as integer) as boolean
    return (number mod 2 = 0)
  end function

  function IsIntegerOdd(number as integer) as boolean
    return (number mod 2 <> 0)
  end function

  function Power(number as float, pow as integer) as dynamic
    n = 1
    if number = 0
      return 0
    end if
    if pow = 0
      return 1
    end if
    if pow < 0
      number = 1 / number
      pow = abs(pow)
    end if
    for i = 0 to pow - 1
      n *= number
    end for
    return n
  end function

  function Round(number as float, decimals = 0 as integer) as float
    if 0 = decimals
      return cint(number)
    else
      magnitude = Power(10, decimals)
      return cint(number * magnitude) / magnitude
    end if
  end function

  function DegreesToRadians(degrees as float) as float
    return (degrees / 180) * BGE.Math.PI()
  end function

  function RadiansToDegrees(radians as float) as float
    return (180 / BGE.Math.PI()) * radians
  end function

  function RandomInRange(lowestInt as integer, highestInt as integer) as integer
    return rnd(highestInt - (lowestInt - 1)) + (lowestInt - 1)
  end function

  function constrainAngle(angleRad as float) as float
    twoPi = 2 * Pi()
    while angleRad < 0
      angleRad += twoPi
    end while
    while angleRad > twoPi
      angleRad -= twoPi
    end while
    return angleRad
  end function

  function RotateVectorAroundVector2d(vector1 as Vector, vector2 as Vector, radians as float) as Vector
    v = {x: vector1.x, y: vector1.y, z: 0}
    s = sin(radians)
    c = cos(radians)

    v.x -= vector2.x
    v.y -= vector2.y

    new_x = v.x * c + v.y * s
    new_y = -v.x * s + v.y * c

    v.x = new_x + vector2.x
    v.y = new_y + vector2.y

    return v
  end function

  function TotalDistance(vector1 as Vector, vector2 as Vector) as float
    x_distance = vector1.x - vector2.x
    y_distance = vector1.y - vector2.y
    z_distance = 0
    if invalid <> vector1.z and invalid <> vector2.z
      z_distance = vector1.z - vector2.z
    end if
    total_distance = Sqr(x_distance * x_distance + y_distance * y_distance + z_distance * z_distance)
    return total_distance
  end function

  function GetAngle(point1 as Vector, point2 as Vector) as float
    vectorP1P2 = BGE.Math.VectorOps.subtract(point2, point1)
    angle = Atan2(vectorP1P2.y, vectorP1P2.x)
    return angle
  end function

  function GetAngleBetweenVectors(center as vector, point1 as Vector, point2 as Vector) as float
    return constrainAngle(GetAngle(center, point1) - GetAngle(center, point2))
  end function


  function average(num1 as float, num2 as float) as float
    return (num1 + num2) / 2
  end function

  function arraySum(nums as float[]) as float
    sum = 0
    for each num in nums
      sum += num
    end for
    return sum
  end function

  function arrayAverage(nums as float[]) as float
    return arraySum(nums) / nums.count()
  end function

  function arrayMin(nums as float[]) as float
    lowest = nums[0]
    for each num in nums
      if num < lowest
        lowest = num
      end if
    end for
    return lowest
  end function

  function arrayMax(nums as float[]) as float
    highest = nums[1]
    for each num in nums
      if num > highest
        highest = num
      end if
    end for
    return highest
  end function

end namespace
