' @module BGE
namespace BGE.Math

  function Min(a as dynamic, b as dynamic) as dynamic
    if a <= b
      return a
    end if
    return b
  end function

  function Max(a as dynamic, b as dynamic) as dynamic
    if a >= b
      return a
    end if
    return b
  end function

  function Clamp(number as dynamic, minVal as dynamic, maxVal as dynamic) as dynamic
    if number < minVal
      return minVal
    else if number > maxVal
      return maxVal
    else
      return number
    end if
  end function

  function PI() as float
    return 3.1415926535897932384626433832795
  end function

  function Atan2(y as float, x as float) as float
    piValue = PI()
    if x > 0
      angle = Atn(y / x)
    else if y >= 0 and x < 0
      angle = Atn(y / x) + pi
    else if y < 0 and x < 0
      angle = Atn(y / x) - pi
    else if y > 0 and x = 0
      angle = piValue / 2
    else if y < 0 and x = 0
      angle = (piValue / 2) * -1
    else
      angle = 0
    end if

    return angle
  end function

  function IsIntegerEven(number as integer) as boolean
    return (number MOD 2 = 0)
  end function

  function IsIntegerOdd(number as integer) as boolean
    return (number MOD 2 <> 0)
  end function

  function Power(number as dynamic, pow as integer) as dynamic
    n = 1
    for i = 0 to pow - 1
      n *= number
    end for
    return n
  end function

  function Round(number as float, decimals = 0 as integer) as float
    if 0 = decimals
      return cint(number)
    else
      magnitude = Power(10, decimals)
      return cint(number * magnitude) / magnitude
    end if
  end function

  function DegreesToRadians(degrees as float) as float
    return (degrees / 180) * BGE.Math.PI()
  end function

  function RadiansToDegrees(radians as float) as float
    return (180 / BGE.Math.PI()) * radians
  end function

  function RandomInRange(lowestInt as integer, highestInt as integer) as integer
    return rnd(highestInt - (lowestInt - 1)) + (lowestInt - 1)
  end function

  function RotateVectorAroundVector2d(vector1 as Vector, vector2 as Vector, radians as float) as object
    v = new Vector(vector1.x, vector1.y)
    s = sin(radians)
    c = cos(radians)

    v.x -= vector2.x
    v.y -= vector2.y

    new_x = v.x * c + v.y * s
    new_y = -v.x * s + v.y * c

    v.x = new_x + vector2.x
    v.y = new_y + vector2.y

    return v
  end function

  function TotalDistance(vector1 as Vector, vector2 as Vector) as float
    x_distance = vector1.x - vector2.x
    y_distance = vector1.y - vector2.y
    z_distance = 0
    if invalid <> vector1.z and invalid <> vector2.z
      z_distance = vector1.z - vector2.z
    end if
    total_distance = Sqr(x_distance * x_distance + y_distance * y_distance + z_distance * z_distance)
    return total_distance
  end function

  function GetAngle(vector1 as Vector, vector2 as Vector) as float
    x_distance = vector1.x - vector2.x
    y_distance = vector1.y - vector2.y
    return Atan2(y_distance, x_distance) + BGE.Math.PI()
  end function

end namespace
