namespace BGE.Math

  enum WindingDirection
    clockwise = 0
    counterclockwise = 1
  end enum


  class Triangle
    lengths as float[] = []
    angles as float[] = []
    anglesToNext as float[] = []
    anglesToPrevious as float[] = []
    points as BGE.Math.Vector[] = []

    longestIndex as integer = 0
    height as float = 0

    winding as WindingDirection = WindingDirection.counterclockwise

    angleRotatedFromOriginal as float = 0

    '
    ' @param {BGE.Math.Vector[]} points Array of points in counter clockwise winding (i.e. follows right-hand-rule)
    sub new(points as BGE.Math.Vector[], rearrangeToLongestFirst = false as boolean)
      m.setPoints(points, rearrangeToLongestFirst)
    end sub


    sub setPoints(points as BGE.Math.Vector[], rearrangeToLongestFirst = false as boolean)

      crossProduct = BGE.Math.VectorOps.crossProduct(BGE.Math.VectorOps.subtract(points[2], points[0]), BGE.Math.VectorOps.subtract(points[1], points[0]))

      if crossProduct.z < 0
        'this has clockwise winding, so swap points 1 & 2
        temp = points[2]
        points[2] = points[1]
        points[1] = temp
      end if

      longest = 0
      m.longestIndex = 0
      lengths = []
      angles = []
      anglesToNext = []
      anglesToPrevious = []
      twoPi = BGE.Math.PI() * 2
      for i = 0 to 2
        j = (i + 1) mod 3
        k = (j + 1) mod 3
        length = BGE.Math.TotalDistance(points[i], points[j])

        if length > longest
          m.longestIndex = i
          longest = length
        end if

        lengths.push(length)
        angles.push(twoPi - BGE.Math.GetAngleBetweenVectors(points[i], points[k], points[j]))
        anglesToNext.push(BGE.Math.GetAngle(points[i], points[j]))
        anglesToPrevious.push(BGE.Math.GetAngle(points[i], points[k]))
        if not rearrangeToLongestFirst
          m.points.push(BGE.Math.VectorOps.copy(points[i]))
        end if
      end for
      if rearrangeToLongestFirst
        for index = m.longestIndex to m.longestIndex + 3
          i = index mod 3
          m.lengths.push(lengths[i])
          m.angles.push(angles[i])
          m.anglesToNext.push(anglesToNext[i])
          m.points.push(BGE.Math.VectorOps.copy(points[i]))
        end for
        m.longestIndex = 0
      else
        m.lengths = lengths
        m.angles = angles
        m.anglesToNext = anglesToNext
        m.anglesToPrevious = anglesToPrevious
      end if

      m.height = m.getHeightByTangentIndex(m.nextIndex(m.longestIndex))
      if m.height < 0
        'winding error?
      end if
    end sub


    function getLongestSide() as float
      return m.lengths[m.longestIndex]
    end function


    function isObtuse() as boolean
      halfPiVal = BGE.Math.HalfPI()
      for i = 0 to 2
        if m.angles[i] > (halfPiVal * 1.01)
          return true
        end if
      end for
      return false
    end function

    function isAcute() as boolean
      halfPiVal = BGE.Math.HalfPI()
      for i = 0 to 2
        if m.angles[i] > (halfPiVal * 0.99)
          return false
        end if
      end for
      return true
    end function


    function getOriginIndex() as integer
      i = 0
      for each point in m.points
        if BGE.Math.VectorOps.isZero(point)
          return i
        end if
        i++
      end for
      return -1
    end function


    function getHeightByTangentIndex(tangentIndex) as float
      'tangentIndex = (m.longestIndex + 1) mod 3
      tangentLength = m.lengths[tangentIndex]
      return tangentLength * sin(m.angles[tangentIndex])
    end function

    function nextIndex(currentIndex as integer) as integer
      return (currentIndex + 1) mod 3
    end function

    function previousIndex(currentIndex as integer) as integer
      return (currentIndex + 3 - 1) mod 3
    end function


    function toStr() as string
      result = `Triangle {
points: ${BGE.arrayToStr(m.points)}
lengths: ${BGE.arrayToStr(m.lengths)}
angles: ${BGE.arrayToStr(m.angles)}
anglesToNext: ${BGE.arrayToStr(m.anglesToNext)}
anglesToPrevious: ${BGE.arrayToStr(m.anglesToPrevious)}
longestIndex: ${m.longestIndex}
height: ${m.height}
}`
      return result
    end function
  end class



  ' Gets third point in triangle
  '
  '   ?-----B
  '   |   / |
  '   |  /  |
  '   |a/c  |
  '   A ----|   <--- this point is grid aligned, point "?" could be anywhere
  '
  ' @param {Vector} aPoint
  ' @param {vector} bPoint
  ' @param {float} aAngle
  ' @return {Vector}
  function getThirdRightTrianglePoint(aPoint as Vector, bPoint as vector, aAngle as float) as Vector
    hypotenuse = BGE.Math.VectorOps.length(BGE.Math.VectorOps.subtract(bPoint, aPoint))
    aToCLength = bPoint.x - aPoint.x
    bAngle = BGE.Math.halfPI() - aAngle
    cAngle = 0
    if aToCLength <> 0
      bToCLength = - (bPoint.y - aPoint.y)
      cAngle = -aTn(bToCLength / aToCLength)
    else
      if aPoint.y < bPoint.y
        ' B is directly over A
        cAngle = halfPI()
      else if aPoint.y > bPoint.y
        cAngle = -halfPI()
      else
        ' A = B ?
        return aPoint
      end if
    end if


    gridAngleAToUnknown = (aAngle + cAngle)
    gridAngleBToUnknown = BGE.Math.Pi() - (bAngle - cAngle)

    return intersectPointAngle(aPoint, gridAngleAToUnknown, bPoint, gridAngleBToUnknown)
  end function
end namespace