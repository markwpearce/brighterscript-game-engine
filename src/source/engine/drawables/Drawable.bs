' @module BGE
namespace BGE


  ' Abstract drawable class - all drawables extend from this
  class Drawable
    ' --------------Values That Can Be Changed------------
    name as string = ""

    ' The offset of the image from the owner's position
    offset as BGE.Math.Vector = new BGE.Math.Vector()

    ' The image scale
    scale as BGE.Math.Vector = new BGE.Math.Vector(1, 1, 1)

    ' Rotation of the image
    rotation as BGE.Math.Vector = new BGE.Math.Vector()

    ' This can be used to tint the image with the provided color if desired. White makes no change to the original image.
    color as integer = &hFFFFFF

    ' Change the image alpha (transparency).
    alpha as float = 255

    ' Whether or not the image will be drawn.
    enabled as boolean = true

    ' The canvas this will be drawn to (e.g. m.game.getCanvas())
    drawTo as object = invalid

    transformationMatrix = new BGE.Math.Matrix44()

    motionChecker as MotionChecker = new MotionChecker()

    protected shouldRedraw as boolean = false

    ' -------------Never To Be Manually Changed-----------------
    ' These values should never need to be manually changed.
    protected owner as GameEntity ' owner GameEntity

    protected width as float = 0
    protected height as float = 0

    private sceneObjects as object = {}

    sub new(owner as GameEntity, canvasBitmap as object, args = {} as object)
      m.owner = owner
      m.drawTo = canvasBitmap
      m.append(args)
    end sub

    ' Sets the canvas this will draw to
    '
    ' @param {object} [canvas] The canvas (roBitmap) this should draw to
    sub setCanvas(canvas as object)
      m.drawTo = canvas
    end sub

    sub addToScene(rendererScene as Renderer)
    end sub

    sub removeFromScene(rendererScene as Renderer)
      for each item in m.sceneObjects.Items()
        rendererScene.removeSceneObject(item.value)
      end for
      m.sceneObjects = {}
    end sub

    sub computeTransformationMatrix()
      currentlyMoved = m.motionChecker.check(m.offset, m.rotation, m.scale)

      if m.movedLastFrame() and not currentlyMoved
        m.motionChecker.resetMovedFlag()
        return
      end if

      if currentlyMoved
        m.motionChecker.setTransform(m.offset, m.rotation, m.scale)
        m.transformationMatrix.setFrom(BGE.Math.getTransformationMatrix(m.offset, m.rotation, m.scale))
      end if
    end sub

    function movedLastFrame(includeOwner = false as boolean) as boolean
      if includeOwner
        return m.motionChecker.movedLastFrame or m.owner.movedLastFrame()
      end if
      return m.motionChecker.movedLastFrame
    end function

    sub update()
    end sub

    sub draw(additionalRotation = invalid as BGE.Math.Vector)
    end sub

    sub onResume(pausedTimeMs as integer)
    end sub

    ' Forces a redraw of this drawable on next frame
    ' By default, some drawables that need to do preprocessing (text, polygons, etc) will only redraw automatically
    ' if their dimensions or underlying values change --
    '
    sub forceRedraw()
      m.shouldRedraw = true
    end sub

    function isEnabled() as boolean
      return m.enabled and m.owner.enabled
    end function

    function getSize() as object
      return {width: m.width, height: m.height}
    end function

    function getDrawnSize() as object
      return {width: m.width * m.scale.x, height: m.height * m.scale.y}
    end function

    function getWorldPosition() as BGE.Math.Vector
      return m.owner.transformationMatrix.multVecMatrix(m.offset)
    end function

    function getPretranslation() as BGE.Math.Vector
      return new BGE.Math.Vector()
    end function

    protected function getFillColorRGBA(ignoreColor = false as boolean) as integer
      rgba = BGE.Colors().White
      if not ignoreColor and invalid <> m.color
        rgba = (m.color << 8) + int(m.alpha)
      end if
      return rgba
    end function

    protected function getSceneObjectName(extraBit = "" as string) as string
      return `${m.owner.name}_${m.name}_${extraBit}`
    end function

    protected function addSceneObjectToRenderer(sceneObj as SceneObject, renderScene as Renderer) as SceneObject
      sceneObj.drawable = m
      renderScene.addSceneObject(sceneObj)
      m.sceneObjects[sceneObj.id] = sceneObj
      return sceneObj
    end function

    protected sub drawRegionToCanvas(draw2d as object, additionalRotation = invalid as BGE.Math.Vector, ignoreColor = false as boolean)
      position = m.getWorldPosition()
      x = position.x
      y = position.y
      rgba = m.getFillColorRGBA(ignoreColor)
      totalRotation = m.rotation.z
      if invalid <> additionalRotation
        totalRotation = additionalRotation.add(m.rotation).z
      end if

      m.owner.game.canvas.renderer.drawRegion(draw2d, x, y, m.scale.x, m.scale.y, -totalRotation, rgba)
    end sub
  end class


  class DrawableWithOutline extends Drawable
    ' Draw an outline stroke of outlineRGBA color
    drawOutline as boolean = false

    ' RGBA color for outline stroke
    outlineRGBA as integer = BGE.Colors().White


    function new(owner as GameEntity, canvasBitmap as object, args = {} as object)
      super(owner, canvasBitmap, args)
    end function
  end class


end namespace
