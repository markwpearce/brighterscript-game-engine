namespace BGE

  class Model3dTexture
    srcImage as ifRegion
    points as BGE.Math.Vector[]
    sub new(srcImage as ifRegion, points as BGE.Math.Vector[])
      m.points = points
      m.srcImage = srcImage
    end sub
  end class

  class Model3dFace
    vertices as BGE.Math.Vector[]
    normal as BGE.Math.Vector
    optional Texture as Model3dTexture
    color as integer = BGE.Colors().White
    sub new(vertices as BGE.Math.Vector[], normal = invalid as BGE.Math.Vector)
      if vertices.Count() = 3
        m.vertices = vertices
        m.normal = normal
        if m.normal = invalid
          m.resetNormal()
        end if
      else
        throw "Model3dFace needs 3 vertices"
      end if
    end sub

    function toStr() as string
      return `Vertices: [\n ${ BGE.Math.VectorOps.toStr(m.vertices[0])},\n ${ BGE.Math.VectorOps.toStr(m.vertices[1])},\n ${ BGE.Math.VectorOps.toStr(m.vertices[2])}\n]\nNormal: ${ BGE.Math.VectorOps.toStr(m.normal)} `
    end function

    sub resetNormal()
      topVector = BGE.Math.VectorOps.subtract(m.vertices[0], m.vertices[2])
      downVector = BGE.Math.VectorOps.subtract(m.vertices[1], m.vertices[2])
      m.normal = BGE.Math.VectorOps.crossProduct(topVector, downVector)
      BGE.Math.VectorOps.normalize(m.normal)
    end sub

  end class

  class Model3d
    faces as Model3dFace[]
    name as string = "Model3d"

    sub new(faces as Model3dFace[])
      m.faces = faces
    end sub

    function toStr() as string
      lines = [] as string[]
      lines.push(`Model3d ${m.name}`)
      lines.push(`Faces: [\n`)
      for each face in m.faces
        lines.push(face.toStr())
      end for
      lines.push(`]`)
      return lines.join(chr(10))
    end function
  end class


  class DrawableModel extends Drawable

    model as Model3d

    sub new(owner as BGE.GameEntity, canvasBitmap as object, model as Model3d, args = {} as object)
      super(owner, canvasBitmap, args)
      m.model = model
      ' bs:disable-next-line: 1001
      m.append(args)
    end sub

    override sub addToScene(rendererObj as Renderer)
      m.addSceneObjectToRenderer(new SceneObjectModel(m.getSceneObjectName("3dModel-" + m.model.name), m), rendererObj)
    end sub

  end class


end namespace