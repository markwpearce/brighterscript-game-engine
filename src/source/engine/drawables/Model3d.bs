namespace BGE

  class Model3dTexture
    srcImage as ifRegion
    points as BGE.Math.Vector[]
    sub new(srcImage as ifRegion, points as BGE.Math.Vector[])
      m.points = points
      m.srcImage = srcImage
    end sub
  end class

  class Model3dFace
    vertices as BGE.Math.Vector[]
    normal as BGE.Math.Vector
    optional Texture as Model3dTexture
    color as integer = BGE.Colors().White
    sub new(vertices as BGE.Math.Vector[], normal as BGE.Math.Vector)
      if vertices.Count() = 3
        m.vertices = vertices
        m.normal = normal
      else
        throw "Model3dFace needs 3 vertices"
      end if
    end sub

    function toStr() as string
      return `Vertices: [\n ${m.vertices[0].toStr()},\n ${m.vertices[1].toStr()},\n ${m.vertices[2].toStr()}\n]\nNormal: ${m.normal.toStr()} `
    end function
  end class

  class Model3d
    faces as Model3dFace[]
    name as string

    sub new(faces as Model3dFace[])
      m.faces = faces
    end sub

    function toStr() as string
      lines = [] as string[]
      lines.push(`Model3d ${m.name}`)
      lines.push(`Faces: [\n`)
      for each face in m.faces
        lines.push(face.toStr())
      end for
      lines.push(`]`)
      return lines.join(chr(10))
    end function
  end class



end namespace