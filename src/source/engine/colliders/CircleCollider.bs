' @module BGE
namespace BGE

  ' Collider with the shape of a circle centered at (offset.x, offset.y), with given radius
  class CircleCollider extends Collider

    ' Radius of the collider
    radius = 0

    ' Create a new CircleCollider
    '
    ' @param {string} colliderName - name of this collider
    ' @param {object} [args={}] - additional properties (e.g {radius: 10})
    sub new (colliderName as string, args = {} as object)
      super(colliderName, args)
      m.colliderType = "circle"
      ' bs:disable-next-line: 1001
      m.append(args)
    end sub


    ' Refreshes the collider
    '
    override sub refreshColliderRegion()
      region = m.compositorObject.GetRegion()
      region.SetCollisionType(2)
      region.SetCollisionCircle(m.offset.x, m.offset.y, m.radius)
    end sub


    ' Draws the circle outline around the collider
    override sub debugDraw(renderObj as Renderer, position as BGE.Math.Vector, color = &hFF0000FF as integer, addName = false as boolean, font = invalid)
      ' This function is slow as I'm making draw calls for every section of the line.
      ' It's for debugging purposes only!
      offsetPosition = renderObj.worldPointToCanvasPoint(position.subtract(m.offset))
      renderObj.DrawCircleOutline(16, offsetPosition.x, offsetPosition.y, m.radius, color)
      if addName
        textOffset = 10
        renderObj.drawText(m.name, offsetPosition.x + textOffset, offsetPosition.y - textOffset, color, font)
      end if
    end sub

  end class
end namespace
