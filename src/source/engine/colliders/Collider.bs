' @module BGE
namespace BGE

  ' Colliders are attached to GameEntities and when two colliders intersect, it triggers the onCollision() method in
  ' the GameEntity
  class Collider

    ' The type of this collider - should be defined in sub classes (eg. "circle", "rectangle")
    colliderType as string = invalid
    ' Name this collider will be identified by
    name as string = ""
    ' Does this collider trigger onCollision() ?
    enabled as boolean = true
    ' Offset from the GameEntity it is attached to
    offset as BGE.Math.Vector = new BGE.Math.Vector()

    ' Bitflag for collision detection: this collider is in this group - https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsprite.md#setmemberflagsflags-as-integer-as-void
    memberFlags = 1
    ' Bitflag for collision detection: this collider will only collider with colliders in this group - https://developer.roku.com/en-ca/docs/references/brightscript/interfaces/ifsprite.md#setcollidableflagsflags-as-integer-as-void
    collidableFlags = 1

    ' Used internal to Game - should not be modified manually
    compositorObject as roSprite = invalid

    ' Colliders can be tagged with any number of tags so they can be easily identified (e.g. "enemy", "wall", etc.)
    tagsList = new TagList()


    ' Creates a new Collider
    '
    ' @param {string} colliderName - the name this collider will be identified by
    ' @param {object} [args={}] - additional properties to be added to this collider
    sub new (colliderName as string, args = {} as object)
      m.name = colliderName
      ' bs:disable-next-line: 1001
      m.append(args)
    end sub


    ' Sets up this collider to be associated with a given game and entity
    '
    ' @param {object} game - the game this collider is used by
    ' @param {string} entityName - name of the entity that owns this collider
    ' @param {string} entityId - id of the entity that owns this collider
    ' @param {BGE.Math.Vector} entityPosition - entity's position
    sub setupCompositor(gameEngine as Game, entityName as string, entityId as string, entityPosition as BGE.Math.Vector)
      region = CreateObject("roRegion", gameEngine.getEmptyBitmap(), 0, 0, 1, 1)
      m.compositorObject = gameEngine.compositor.NewSprite(entityPosition.x, entityPosition.y, region, 0)
      m.compositorObject.SetDrawableFlag(false)
      m.compositorObject.SetData({colliderName: m.name, objectName: entityName, entityId: entityId})
      m.refreshColliderRegion()
    end sub


    ' Refreshes the collider.
    ' Called every frame by the GameEngine.
    ' Should be overrided by sub classes if they have specialized collision set ups (e.g. circle, rectangle).
    '
    sub refreshColliderRegion()
      region = m.compositorObject.GetRegion()
      region.SetCollisionType(0)
    end sub


    ' Moves the compositor to the new x,y position - called from Game when the entity it is attached to moves
    '
    ' @param {BGE.Math.Vector} entityPosition
    sub adjustCompositorObject(entityPosition as BGE.Math.Vector)
      if m.enabled
        m.compositorObject.SetMemberFlags(m.memberFlags)
        m.compositorObject.SetCollidableFlags(m.collidableFlags)
        m.refreshColliderRegion()
        m.compositorObject.MoveTo(entityPosition.x, entityPosition.y)
      else
        m.compositorObject.SetMemberFlags(0)
        m.compositorObject.SetCollidableFlags(0)
      end if
    end sub


    ' Helper function to draw an outline around the collider
    '
    ' @param {object} draw2d
    ' @param {BGE.Math.Vector} position
    ' @param {integer} [color=&hFF0000FF]
    sub debugDraw(draw2d as object, position as BGE.Math.Vector, color = &hFF0000FF as integer, addName = false as boolean, font = invalid)
    end sub

  end class
end namespace
