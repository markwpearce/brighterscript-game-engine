namespace BGE

  class Camera2d extends Camera


    protected top as float
    protected bottom as float
    protected right as float
    protected left as float

    protected near as float = 1000
    protected far as float = -10000

    'protected orthoProj as BGE.Math.Matrix44

    override sub setTarget(targetPos as BGE.Math.Vector)
      ' moves camera to center on target
      m.position.x = targetPos.x
      m.position.y = targetPos.y
    end sub

    override sub rotate(rotation as BGE.Math.Vector)
      ' 2d Cameras don't rotate
      ' TODO: The probably could rotate in in Z axis. hmmm
    end sub

    override function isInView(point as BGE.Math.Vector) as boolean
      ' add a bit of fudge value here, so things don't disappear when still in screen
      xFudge = m.frameSize.x * 0.2
      yFudge = m.frameSize.y * 0.2

      inViewHorizontally = point.x >= (m.left - xFudge) and point.x <= (m.right + xFudge)
      inViewVertically = point.y >= (m.bottom - yFudge) and point.y <= (m.top + yFudge)

      return inViewHorizontally and inViewVertically
    end function

    override sub computeWorldToCameraMatrix()

      halfW = m.frameSize.x * 0.5
      halfH = m.frameSize.y * 0.5

      m.top = m.position.y + halfH
      m.bottom = m.position.y - halfH
      m.right = m.position.x + halfW
      m.left = m.position.x - halfW
      m.near = m.position.z + 1
      m.far = -10000

      m.worldToCamera = BGE.Math.orthographicMatrix(m.top, m.bottom, m.left, m.right, m.far, m.near)
    end sub


    override function distanceFromCameraFront(point as BGE.Math.Vector) as float
      return m.position.z - point.z
    end function

    override function worldPointToCanvasPoint(pWorld as BGE.Math.Vector) as BGE.Math.Vector
      if invalid = m.worldToCamera
        m.computeWorldToCameraMatrix()
      end if

      pCamera = BGE.Math.Matrix44.multVecMatrix(pWorld, m.worldToCamera)
      if pCamera.z >= 0
        return invalid
      end if

      canvasWidth = m.frameSize.x
      canvasHeight = m.frameSize.y
      pScreen = {x: 0, y: 0}
      pScreen.x = pCamera.x * canvasWidth * 0.5
      pScreen.y = pCamera.y * canvasHeight * 0.5
      pNDC = {x: 0, y: 0}

      pNDC.x = (pScreen.x + canvasWidth * 0.5) '/ canvasWidth
      pNDC.y = (-pScreen.y + canvasHeight * 0.5) '/ canvasHeight
      pRaster = {x: fix(pNDC.x), y: fix(pNDC.y), z: 0}

      return pRaster
    end function


  end class


end namespace