namespace BGE

  class Camera

    orientation as BGE.Math.Vector = new BGE.Math.Vector(0, 0, -1)

    position as BGE.Math.Vector = new BGE.Math.Vector(0, 0, 1000)

    motionChecker as MotionChecker = new MotionChecker()

    frameSize as BGE.Math.Vector = new BGE.Math.Vector()

    zoom as float = 1 ' TODO: do something with zoom!

    worldToCamera as BGE.Math.Matrix44


    sub new()
    end sub

    sub setFrameSize(width as integer, height as integer)
      m.frameSize.x = width
      m.frameSize.y = height
    end sub

    sub setTarget(targetPos as BGE.Math.Vector)
      ' m.orientation = targetPos.subtract(m.position).normalize()
    end sub


    sub rotate(rotation as BGE.Math.Vector)
      'm.orientation = BGE.Math.getRotationMatrix(rotation).multDirMatrix(m.orientation).normalize()
    end sub

    sub checkMovement()
      currentlyMoved = m.motionChecker.check(m.position, m.orientation)
      if m.movedLastFrame() and not currentlyMoved
        m.motionChecker.resetMovedFlag()
        return
      end if

      if currentlyMoved
        m.onCameraMovement()
        m.motionChecker.setTransform(m.position, m.orientation)
      end if
    end sub

    sub onCameraMovement()
    end sub

    function movedLastFrame() as boolean
      return m.motionChecker.movedLastFrame
    end function


    function distanceFromCameraFront(point as BGE.Math.Vector) as float
      return point.z
    end function


    function isInView(point as BGE.Math.Vector) as boolean
      return point.x >= 0 and point.x <= m.frameSize.x and point.y >= 0 and point.y <= m.frameSize.y
    end function

    sub computeWorldToCameraMatrix()
      m.worldToCamera = BGE.Math.Matrix44Identity()
    end sub

    function getDrawMode() as BGE.SceneObjectDrawMode
      return BGE.SceneObjectDrawMode.directToCamera
    end function

    function worldPointToCanvasPoint(pWorld as BGE.Math.Vector) as BGE.Math.Vector
      return pWorld
    end function

  end class


end namespace