namespace BGE

  class ScratchBitmap

    bitmap as roBitmap
    id as string

    sub new(id as string, w as integer, h as integer)
      m.bitmap = CreateObject("roBitmap", {width: w, height: h, alphaEnable: true})
      m.id = id
    end sub
  end class


  class ScratchRegion

    region as roRegion
    scratchBmp as ScratchBitmap
    scale as BGE.Math.Vector = BGE.Math.createScaleVector(1)

    sub new(region as roRegion, scratchBmp as ScratchBitmap)
      m.region = region
      m.scratchBmp = scratchBmp
    end sub

    function getBitmapObject() as roBitmap
      return m.scratchBmp.bitmap
    end function

  end class

  class ScratchBitmapPool

    private pool as ScratchBitmap[] = []

    ' These values work for low-end devices (Express, eg)
    ' Ideally, the width and height of the scratch bitmaps would be bigger
    ' For example, a Roku Ultra 4k can handle 1920x1080
    ' It is unknown what the "correct" size is for various devices
    ' But it would be great to have a look-up table for best values for different devices
    private scratchWidth as integer = 1280 '1024
    private scratchHeight as integer = 768

    private nextId = 0

    private maxPoolCount = 8
    private activePoolCount = 0

    private doPooling = true

    sub new(initialCount = 5)
      for i = 0 to initialCount - 1
        m.addNewBitmapToPool()
      end for
    end sub


    private sub addNewBitmapToPool(w = -1, h = -1)
      id = m.nextId.toStr()
      m.nextId++

      m.pool.push(new ScratchBitmap(id, m.scratchWidth, m.scratchHeight))
      m.activePoolCount++
    end sub


    function getRegion(askedForWidth as float, askedForHeight as float, onTopRight = false) as ScratchRegion
      if not m.doPooling
        return getNewMemoryScratchRegion(askedForWidth, askedForHeight)
      end if
      width = BGE.Math.Clamp(fix(askedForWidth + 1), 1, m.scratchWidth)
      height = BGE.Math.Clamp(fix(askedForHeight + 1), 1, m.scratchHeight)

      if width > m.scratchWidth or height > m.scratchHeight
        return invalid
      end if
      bmp = invalid
      if m.pool.count() > 0
        bmp = m.pool.pop()
      end if
      if bmp = invalid and m.activePoolCount < m.maxPoolCount
        m.addNewBitmapToPool()
        bmp = m.pool.pop()
        if bmp = invalid or bmp.bitmap = invalid
          return invalid
        end if
      end if

      region = invalid
      if bmp = invalid
        print "BMP Pool has been drained"
        print "BMP Pool Size: "; m.pool.count(); "/"; m.activePoolCount; " (";m.maxPoolCount;")"
        return invalid
      end if
      if not onTopRight
        ' create region on top left
        region = CreateObject("roRegion", bmp.bitmap, 0, 0, width, height) as roRegion
      else
        ' create region on top right
        region = CreateObject("roRegion", bmp.bitmap, m.scratchWidth - width, 0, width, height) as roRegion
      end if
      if invalid = region
        m.pool.push(bmp)
        return invalid
      end if

      bmp.bitmap.clear(0)

      result = new ScratchRegion(region, bmp)
      if askedForWidth > m.scratchWidth or askedForHeight > m.scratchHeight
        minScale = BGE.Math.min(width / askedForWidth, height / askedForHeight)
        result.scale = BGE.Math.createScaleVector(minScale)
      end if
      return result
    end function

    sub returnRegion(usedRegion as ScratchRegion)
      if usedRegion = invalid or not m.doPooling
        return
      end if

      inProgBmp = usedRegion.scratchBmp
      ' NOTE: in the future, it may be necessary to "finish" the bitmap: inProgBmp.bitmap.finish(), but this slows things down

      m.pool.push(inProgBmp)
    end sub

    sub returnRegions(usedRegions as ScratchRegion[])
      if not m.doPooling
        return
      end if

      for i = usedRegions.count() - 1 to 0 step -1
        region = usedRegions[i]
        m.returnRegion(region)
      end for
    end sub

    sub clearPool()
      m.pool = []
      m.activePoolCount = 0
    end sub

  end class


  function getNewMemoryScratchRegion(width as float, height as float) as ScratchRegion
    if width < 1 or height < 1
      return invalid
    end if
    bmp = new ScratchBitmap("temp", width, height)
    if invalid = bmp
      return invalid
    end if
    region = CreateObject("roRegion", bmp.bitmap, 0, 0, width, height)
    return new ScratchRegion(region, bmp)
  end function

end namespace