namespace BGE

  class ScratchBitmap

    bitmap as object
    id as string

    sub new(id as string, w as integer, h as integer)
      m.bitmap = CreateObject("roBitmap", {width: w, height: h, alphaEnable: true})
      m.id = id
    end sub
  end class


  class ScratchRegion

    region as object
    scratchBmp as ScratchBitmap
    fromPool as boolean

    sub new(region as object, scratchBmp as ScratchBitmap, fromPool as boolean)
      m.region = region
      m.scratchBmp = scratchBmp
      m.fromPool = fromPool
    end sub

    function getBitmapObject() as object
      return m.scratchBmp.bitmap
    end function

  end class

  class ZZScratchBitmapPool


    private pool as object[] = []
    private scratchHeight as integer = 1080
    private scratchWidth as integer = 1920

    private nextId = 0

    private reuseBitmaps = false

    private maxPoolCount = 15
    private activePoolCount = 0


    sub new(initialCount = 0)
      for i = 0 to initialCount - 1
        m.addNewBitmapToPool()
      end for
    end sub


    private sub addNewBitmapToPool(w = -1, h = -1)
      id = m.nextId.toStr()
      m.nextId++
      if w = -1
        w = m.scratchWidth
      end if
      if h = -1
        h = m.scratchHeight
      end if
      m.pool.push(new ScratchBitmap(id, w, h))
    end sub


    function getRegion(width as float, height as float) as ScratchRegion

      width = BGE.Math.Clamp(fix(width + 1), 256, m.scratchWidth)
      height = BGE.Math.Clamp(fix(height + 1), 256, m.scratchHeight)

      if not m.reuseBitmaps
        bmp = new ScratchBitmap("0", width, height)
        if invalid = bmp
          return invalid
        end if
        region = CreateObject("roRegion", bmp.bitmap, 0, 0, width, height)
        return new ScratchRegion(region, bmp, false)
      end if

      if width > m.scratchWidth or height > m.scratchHeight
        return invalid
      end if
      bmp = invalid
      if m.pool.count() > 0
        i = 0
        for each sb in m.pool
          if sb.bitmap.getWidth() >= width and sb.bitmap.getHeight() >= height
            bmp = sb
            exit for
          end if
          i++
        end for
        if bmp <> invalid
          m.pool.delete(i)
        else if m.activePoolCount >= m.maxPoolCount
          ' make some room in the pool
          m.pool.pop()
          m.activePoolCount--
        end if
      end if
      if bmp = invalid
        m.addNewBitmapToPool(width, height)
        bmp = m.pool.pop()
        if bmp = invalid or bmp.bitmap = invalid
          return invalid
        end if
        m.activePoolCount++
      end if

      region = invalid
      if bmp = invalid
        return invalid
      end if
      region = CreateObject("roRegion", bmp.bitmap, 0, 0, width, height)
      if invalid = region
        m.pool.push(bmp)
        return invalid
      end if

      bmp.bitmap.clear(0)
      return new ScratchRegion(region, bmp, true)
    end function

    sub returnRegion(usedRegion as ScratchRegion)
      if usedRegion = invalid or not m.reuseBitmaps
        return
      end if
      if not usedRegion.fromPool
        return
      end if
      inProgBmp = usedRegion.scratchBmp
      inProgBmp.bitmap.finish()
      m.pool.push(inProgBmp)
    end sub

    sub returnRegions(usedRegions as ScratchRegion[])
      if not m.reuseBitmaps
        return
      end if
      for i = usedRegions.count() - 1 to 0 step -1
        region = usedRegions[i]
        m.returnRegion(region)
      end for
    end sub

    sub clearPool()
      m.pool = []
      m.activePoolCount = 0
    end sub

  end class




  function getScratchRegion(width as float, height as float) as ScratchRegion
    bmp = new ScratchBitmap("temp", width, height)
    if invalid = bmp
      return invalid
    end if
    region = CreateObject("roRegion", bmp.bitmap, 0, 0, width, height)
    return new ScratchRegion(region, bmp, false)
  end function

end namespace