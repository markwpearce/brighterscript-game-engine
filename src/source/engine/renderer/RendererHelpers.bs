namespace BGE

  enum WindingDirection
    clockwise = 0
    counterclockwise = 1
  end enum


  class TriangleDetails
    lengths as BGE.Math.Vector[] = []
    angles as BGE.Math.Vector[] = []
    anglesToNext as BGE.Math.Vector[] = []
    anglesToPrevious as BGE.Math.Vector[] = []
    points as BGE.Math.Vector[] = []

    longestIndex as integer = 0
    height as float = 0

    winding as WindingDirection = BGE.WindingDirection.counterclockwise


    '
    '
    ' @param {BGE.Math.Vector[]} points Array of points in counter clockwise winding (i.e. follows right-hand-rule)
    sub new(points as BGE.Math.Vector[], rearrangeToLongestFirst = false as boolean)
      m.setPoints(points, rearrangeToLongestFirst)
    end sub


    sub setPoints(points as BGE.Math.Vector[], rearrangeToLongestFirst = false as boolean)

      crossProduct = points[2].subtract(points[0]).crossProduct(points[1].subtract(points[0]))

      if crossProduct.z < 0
        'this has clockwise winding, so swap points 1 & 2
        temp = points[2]
        points[2] = points[1]
        points[1] = temp
      end if

      longest = 0
      m.longestIndex = 0
      lengths = []
      angles = []
      anglesToNext = []
      anglesToPrevious = []
      twoPi = BGE.Math.PI() * 2
      for i = 0 to 2
        j = (i + 1) mod 3
        k = (j + 1) mod 3
        length = BGE.Math.TotalDistance(points[i], points[j])

        if length > longest
          m.longestIndex = i
          longest = length
        end if

        lengths.push(length)
        angles.push(twoPi - BGE.Math.GetAngleBetweenVectors(points[i], points[k], points[j]))
        anglesToNext.push(BGE.Math.GetAngle(points[i], points[j]))
        anglesToPrevious.push(BGE.Math.GetAngle(points[i], points[k]))
        if not rearrangeToLongestFirst
          m.points.push(points[i].copy())
        end if
      end for
      if rearrangeToLongestFirst
        for index = m.longestIndex to m.longestIndex + 3
          i = index mod 3
          m.lengths.push(lengths[i])
          m.angles.push(angles[i])
          m.anglesToNext.push(anglesToNext[i])
          m.points.push(points[i].copy())
        end for
        m.longestIndex = 0
      else
        m.lengths = lengths
        m.angles = angles
        m.anglesToNext = anglesToNext
        m.anglesToPrevious = anglesToPrevious
      end if

      m.height = m.getHeightByTangentIndex(m.nextIndex(m.longestIndex))
      if m.height < 0
        'winding error?
      end if
    end sub


    function getLongestSide() as float
      return m.lengths[m.longestIndex]
    end function


    function isObtuse() as boolean
      for i = 0 to 2
        if m.angles[i] > BGE.Math.HalfPI()
          return true
        end if
      end for
      return false
    end function


    function getHeightByTangentIndex(tangentIndex) as float
      'tangentIndex = (m.longestIndex + 1) mod 3
      tangentLength = m.lengths[tangentIndex]
      return tangentLength * sin(m.angles[tangentIndex])
    end function

    function nextIndex(currentIndex as integer) as integer
      return (currentIndex + 1) mod 3
    end function

    function previousIndex(currentIndex as integer) as integer
      return (currentIndex + 3 - 1) mod 3
    end function


    function toStr() as string
      result = `Triangle {
  points: ${arrayToStr(m.points)}
  lengths: ${arrayToStr(m.lengths)}
  angles: ${arrayToStr(m.angles)}
  anglesToNext: ${arrayToStr(m.anglesToNext)}
  anglesToPrevious: ${arrayToStr(m.anglesToPrevious)}
  longestIndex: ${m.longestIndex}
  height: ${m.height}
}`
      return result
    end function
  end class


  class TriangleBitmap extends TriangleDetails

    bitmap as object ' roBitmap

    sub new(bitmap as object, points as BGE.Math.Vector[])
      super(points)
      m.bitmap = bitmap
    end sub


  end class




end namespace