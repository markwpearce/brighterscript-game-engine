namespace BGE

  class TriangleBitmap extends BGE.Math.Triangle

    public bitmap as ifDraw2d ' roBitmap

    sub new(bitmap as ifDraw2d, points as BGE.Math.Vector[])
      super(points)
      m.bitmap = bitmap
    end sub
  end class



  class RegionWithId

    region as roRegion

    id as string

    sub new(region as roRegion, id = "" as string)
      m.region = region
      m.id = id
    end sub
  end class

  ' These are limits in screen space, so bottom is at the top

  ' origin  bottom
  '         /   \
  '  alpha/       \
  '     /           >right
  '  l <           /
  '      \       /
  '  beta  \   /
  '        top
  '
  class LimitPointMappings
    totalPointCount as integer = 0
    leftIndex as integer = 0
    rightIndex as integer = 0
    topIndex as integer = 0
    bottomIndex as integer = 0

    left as BGE.Math.Vector
    right as BGE.Math.Vector
    top as BGE.Math.Vector
    bottom as BGE.Math.Vector
    origin as BGE.Math.Vector

    innerLeftAngle as float = 0
    alphaAngle as float = 0
    alphaBetaRatio as float
    originLeftDistance as float = 0
    originTopDistance as float = 0

    sub new(points as BGE.Math.Vector[], screenSpace = true)
      m.totalPointCount = points.count()

      if points.count() < 4
        return
      end if

      i = 0
      m.left = points[0]
      m.top = points[0]
      m.right = points[0]
      m.bottom = points[0]

      for each point in points
        if(point.x < m.left.x)
          m.left = point
          m.leftIndex = i
        end if
        if(point.x > m.right.x)
          m.right = point
          m.rightIndex = i
        end if
        if screenSpace
          if(point.y > m.bottom.y)
            m.bottom = point
            m.bottomIndex = i
          end if
          if(point.y < m.top.y)
            m.top = point
            m.topIndex = i
          end if
        else
          if(point.y < m.bottom.y)
            m.bottom = point
            m.bottomIndex = i
          end if
          if(point.y > m.top.y)
            m.top = point
            m.topIndex = i
          end if
        end if
        i++
      end for
      if screenSpace
        m.origin = new BGE.Math.Vector(m.left.x, m.top.y)
        m.innerLeftAngle = BGE.Math.GetAngleBetweenVectors(m.left, m.bottom, m.top)
        m.alphaAngle = BGE.Math.GetAngleBetweenVectors(m.left, m.origin, m.top)
      else
        m.origin = new BGE.Math.Vector(m.left.x, m.bottom.y)
        m.innerLeftAngle = BGE.Math.GetAngleBetweenVectors(m.left, m.top, m.bottom)
        m.alphaAngle = BGE.Math.GetAngleBetweenVectors(m.left, m.origin, m.bottom)
      end if
      betaAngle = BGE.Math.PI() - m.alphaAngle - m.innerLeftAngle
      if betaAngle = 0
        betaAngle = 0.01
      end if
      m.alphaBetaRatio = m.alphaAngle / betaAngle
      m.originTopDistance = m.top.x - m.origin.x
      m.originLeftDistance = m.left.y - m.origin.y

    end sub
  end class

  interface LimitPoints2d
    left as BGE.Math.Vector
    right as BGE.Math.Vector
    top as BGE.Math.Vector
    bottom as BGE.Math.Vector
  end interface

end namespace