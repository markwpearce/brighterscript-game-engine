namespace BGE

  class TriangleBitmap extends BGE.Math.Triangle

    public bitmap as ifDraw2d ' roBitmap

    sub new(bitmap as ifDraw2d, points as BGE.Math.Vector[])
      super(points)
      m.bitmap = bitmap
    end sub
  end class



  class RegionWithId

    region as roRegion

    id as string

    sub new(region as roRegion, id = "" as string)
      m.region = region
      m.id = id
    end sub
  end class

  ' These are limits in screen space
  ' origin      top
  '            /   \
  '          /       \
  '        /           >right
  '  left <           /
  '         \       /
  '            \   /
  '            bottom   opposite
  '
  ' Baseline angle is the average angle from [left-right, top-bottom]
  class LimitPointMappings
    totalPointCount as integer = 0
    leftIndex as integer = 0
    rightIndex as integer = 0
    topIndex as integer = 0
    bottomIndex as integer = 0

    left as BGE.Math.Vector
    right as BGE.Math.Vector
    top as BGE.Math.Vector
    bottom as BGE.Math.Vector
    origin as BGE.Math.Vector
    opposite as BGE.Math.Vector

    baselineAngle as float

    width as float
    height as float

    sub new(points as BGE.Math.Vector[], screenSpace = true)
      m.totalPointCount = points.count()

      if points.count() < 4
        return
      end if

      i = 0
      m.left = points[0]
      m.top = points[0]
      m.right = points[0]
      m.bottom = points[0]

      for each point in points
        if(point.x < m.left.x)
          m.left = point
          m.leftIndex = i
        end if
        if(point.x > m.right.x)
          m.right = point
          m.rightIndex = i
        end if
        if screenSpace
          if(point.y > m.bottom.y)
            m.bottom = point
            m.bottomIndex = i
          end if
          if(point.y < m.top.y)
            m.top = point
            m.topIndex = i
          end if
        else
          if(point.y < m.bottom.y)
            m.bottom = point
            m.bottomIndex = i
          end if
          if(point.y > m.top.y)
            m.top = point
            m.topIndex = i
          end if
        end if
        i++
      end for
      if screenSpace
        m.origin = {x: m.left.x, y: m.top.y, z: 0}
        m.opposite = {x: m.right.x, y: m.bottom.y, z: 0}
      else
        m.origin = {x: m.left.x, y: m.bottom.y, z: 0}
        m.opposite = {x: m.right.x, y: m.top.y, z: 0}
      end if

      m.width = m.opposite.x - m.origin.x
      m.height = abs(m.opposite.y - m.origin.y)

      m.baselineAngle = (BGE.Math.GetAngle(m.left, m.right) + BGE.Math.GetAngle(m.top, m.bottom)) / 2

    end sub

    function getAngleBaseLineDifference(other as LimitPoints2d) as float
      return m.baselineAngle - (BGE.Math.GetAngle(other.left, other.right) + BGE.Math.GetAngle(other.top, other.bottom)) / 2
    end function

  end class

  interface LimitPoints2d
    left as BGE.Math.Vector
    right as BGE.Math.Vector
    top as BGE.Math.Vector
    bottom as BGE.Math.Vector
  end interface

end namespace