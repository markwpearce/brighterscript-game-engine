namespace BGE

  class TriangleBitmap extends BGE.Math.Triangle

    public bitmap as ifDraw2d ' roBitmap

    sub new(bitmap as ifDraw2d, points as BGE.Math.Vector[])
      super(points)
      m.bitmap = bitmap
    end sub
  end class



  class RegionWithId

    region as roRegion

    id as string

    sub new(region as roRegion, id = "" as string)
      m.region = region
      m.id = id
    end sub
  end class


  class LimitPointMappings
    totalPointCount as integer = 0
    leftIndex as integer = 0
    rightIndex as integer = 0
    topIndex as integer = 0
    bottomIndex as integer = 0

    left as BGE.Math.Vector
    right as BGE.Math.Vector
    top as BGE.Math.Vector
    bottom as BGE.Math.Vector

    sub new(points as BGE.Math.Vector[])
      totalPointCount = points.count()

      i = 0
      for each point in points
        if(point.x < point[m.leftIndex].x)
          m.left = point
          m.leftIndex = i
        end if
        if(point.x > point[m.rightIndex].x)
          m.right = point
          m.rightIndex = i
        end if
        if(point.y < point[m.bottomIndex].y)
          m.bottom = point
          m.bottomIndex = i
        end if
        if(point.y > point[m.topIndex].y)
          m.top = point
          m.topIndex = i
        end if
        i++
      end for
    end sub
  end class

  interface LimitPoints2d
    left as BGE.Math.Vector
    right as BGE.Math.Vector
    top as BGE.Math.Vector
    bottom as BGE.Math.Vector
  end interface

end namespace