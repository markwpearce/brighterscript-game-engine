namespace BGE

  class SceneObjectLine extends SceneObject

    drawable as DrawableLine


    private worldStart as BGE.Math.Vector = new BGE.Math.Vector()
    private worldEnd as BGE.Math.Vector = new BGE.Math.Vector()
    private canvasStart as BGE.Math.Vector = new BGE.Math.Vector()
    private canvasEnd as BGE.Math.Vector = new BGE.Math.Vector()

    sub new(name as string, drawableObj as DrawableLine)
      super(name, drawableObj, BGE.SceneObjectType.Line)
    end sub



    protected override function updateWorldPosition(drawMode as SceneObjectDrawMode) as boolean
      if m.drawable.movedLastFrame(true) or invalid = m.worldStart or invalid = m.worldEnd
        m.worldStart = m.transformationMatrix.multVecMatrix(m.drawable.startPosition)
        m.worldEnd = m.transformationMatrix.multVecMatrix(m.drawable.endPosition)
      end if
      return true
    end function


    override function getPositionsForFrustumCheck(drawMode as SceneObjectDrawMode) as BGE.Math.Vector[]
      return [m.worldStart, m.worldEnd]
    end function

    override function getPositionForCameraDistance(drawMode as SceneObjectDrawMode)
      return BGE.Math.midPointBetweenPoints(m.worldStart, m.worldEnd)
    end function

    protected override function findCanvasPosition(renderer as Renderer, drawMode as SceneObjectDrawMode) as boolean
      m.canvasStart = renderer.worldPointToCanvasPoint(m.worldStart)
      m.canvasEnd = renderer.worldPointToCanvasPoint(m.worldEnd)
      return true
    end function

    protected override function performDraw(renderer as BGE.Renderer, drawMode as SceneObjectDrawMode) as boolean
      if m.canvasStart = invalid or m.canvasEnd = invalid
        return false
      else
        return renderer.drawLine(m.canvasStart.x, m.canvasStart.y, m.canvasEnd.x, m.canvasEnd.y, m.drawable.getFillColorRGBA())
      end if
    end function

  end class

end namespace