namespace BGE

  enum SceneObjectImageDrawMode
    directToCamera = 0
    attemptToOrient = 1
  end enum

  class SceneObjectImage extends SceneObject

    drawable as Image

    drawMode as SceneObjectImageDrawMode = BGE.SceneObjectImageDrawMode.attemptToOrient


    private worldPoints as BGE.Math.CornerPoints = new BGE.Math.CornerPoints()
    private canvasPoints as BGE.Math.CornerPoints = new BGE.Math.CornerPoints()


    private worldPosition as BGE.Math.Vector
    private canvasPosition as BGE.Math.Vector


    private orientationScaleX as float
    private orientationScaleY as float
    private orientationRotation as float


    sub new(name as string, drawableObj as Image)
      super(name, drawableObj, BGE.SceneObjectType.Bitmap)
    end sub

    protected override function performDraw(renderer as BGE.Renderer) as boolean
      if true ' m.drawable.movedLastFrame(true) or invalid = m.worldPosition
        m.findWorldPosition()
      end if
      if true' renderer.camera.movedLastFrame() or m.drawable.movedLastFrame(true) or invalid = m.canvasPosition
        m.findCanvasPosition(renderer)
      end if

      return m.drawToCanvas(renderer)
    end function



    protected sub findWorldPosition()
      if m.drawMode = BGE.SceneObjectImageDrawMode.directToCamera
        m.worldPosition = m.drawable.getWorldPosition()

      else if m.drawMode = BGE.SceneObjectImageDrawMode.attemptToOrient
        ' pretranslation_x = m.drawable.GetPretranslationX()
        ' pretranslation_y = m.drawable.GetPretranslationY()
        ' newPreX = pretranslation_x * scale_x
        ' if scale_x < 0
        '   newPreX = -newPreX
        ' end if
        ' newPreY = pretranslation_y * scale_y
        ' if scale_y < 0
        '   newPreY = -newPreY
        ' end if


        origin = m.drawable.offset
        scaledWidth = -m.drawable.region.getWidth() * m.drawable.scale.x
        scaledHeight = m.drawable.region.getHeight() * m.drawable.scale.y
        tl = origin
        topR = origin.add(new BGE.Math.Vector(scaledWidth, 0, 0))
        bl = origin.add(new BGE.Math.Vector(0, scaledHeight, 0))
        br = origin.add(new BGE.Math.Vector(scaledWidth, scaledHeight, 0))

        ?tl.toStr();topR.toStr()
        ?bl.toStr();br.toStr()



        m.worldPoints.topLeft = m.transformationMatrix.multVecMatrix(tl)
        m.worldPoints.topRight = m.transformationMatrix.multVecMatrix(topR)
        m.worldPoints.bottomLeft = m.transformationMatrix.multVecMatrix(bl)
        m.worldPoints.bottomRight = m.transformationMatrix.multVecMatrix(br)

        ?m.worldPoints.toStr()
        ?"foundWorld"
      end if


      'renderRotation = m.drawable.rotation.subtract(renderer.camera.orientation)
      ' could also use rotation to decide scale
      ' return renderer.drawScaledAndRotatedObject(renderPosition.x, renderPosition.y, m.drawable.scale.x, m.drawable.scale.y, renderRotation.z, m.drawable.region)

    end sub

    protected sub findCanvasPosition(renderer as Renderer)
      if m.drawMode = BGE.SceneObjectImageDrawMode.directToCamera
        m.canvasPosition = renderer.worldPointToCanvasPoint(m.worldPosition)

      else if m.drawMode = BGE.SceneObjectImageDrawMode.attemptToOrient
        index = 0
        for each corner in m.worldPoints.getPointsArray()
          m.canvasPoints.setPointByIndex(index, renderer.worldPointToCanvasPoint(corner))
          index++
        end for

        ?m.canvasPoints.toStr()

        avgXDelta = m.canvasPoints.getAvgXDelta()
        avgYDelta = m.canvasPoints.getAvgYDelta()

        m.orientationScaleX = avgXDelta / m.drawable.region.getWidth()
        m.orientationScaleY = avgYDelta / m.drawable.region.getHeight()
        m.orientationRotation = m.canvasPoints.getAvgRotation()
      end if
    end sub


    protected function drawToCanvas(renderer as BGE.Renderer) as boolean

      drawPos = new Bge.Math.Vector()
      scaleX = 1
      scaleY = 1
      theta = 0

      if m.drawMode = BGE.SceneObjectImageDrawMode.directToCamera
        drawPos = m.canvasPosition
        scaleX = m.drawable.scale.x
        scaleY = m.drawable.scale.y
        theta = m.drawable.rotation.z
      else if m.drawMode = BGE.SceneObjectImageDrawMode.attemptToOrient
        drawPos = m.canvasPoints.topLeft
        scaleX = m.orientationScaleX
        scaleY = m.orientationScaleY
        theta = m.orientationRotation
      end if

      return renderer.drawScaledAndRotatedObject(drawPos.x, drawPos.y, scaleX, scaleY, theta, m.drawable.region)
    end function


  end class

end namespace