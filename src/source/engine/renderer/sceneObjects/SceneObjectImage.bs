namespace BGE

  enum SceneObjectImageDrawMode
    directToCamera = 0
    attemptToOrient = 1
  end enum

  class SceneObjectImage extends SceneObject

    drawable as Image

    drawMode as SceneObjectImageDrawMode = BGE.SceneObjectImageDrawMode.attemptToOrient


    private worldPoints as BGE.Math.CornerPoints = new BGE.Math.CornerPoints()
    private canvasPoints as BGE.Math.CornerPoints = new BGE.Math.CornerPoints()


    private worldPosition as BGE.Math.Vector
    private canvasPosition as BGE.Math.Vector

    private isMirror = false
    private orientationScaleX as float
    private orientationScaleY as float
    private orientationRotation as float
    private surfaceToCameraDotProduct as float
    private surfaceNormal as BGE.Math.Vector

    private validCanvasPosition = false


    sub new(name as string, drawableObj as Image)
      super(name, drawableObj, BGE.SceneObjectType.Bitmap)
    end sub

    protected override function performDraw(renderer as BGE.Renderer) as boolean
      if renderer.camera.movedLastFrame() or m.drawable.movedLastFrame(true) or invalid = m.canvasPosition
        m.validCanvasPosition = m.findCanvasPosition(renderer)
      end if

      if not m.validCanvasPosition
        return false
      end if

      return m.drawToCanvas(renderer)
    end function

    protected override sub updateWorldPosition()
      if m.drawMode = BGE.SceneObjectImageDrawMode.directToCamera
        m.worldPosition = m.drawable.getWorldPosition()

      else if m.drawMode = BGE.SceneObjectImageDrawMode.attemptToOrient
        origin = new BGE.Math.Vector()
        scaledWidth = m.drawable.region.getWidth() * m.drawable.scale.x
        scaledHeight = m.drawable.region.getHeight() * m.drawable.scale.y
        topLeft = new BGE.Math.Vector()
        topRight = new BGE.Math.Vector(scaledWidth, 0, 0)
        bottomLeft = new BGE.Math.Vector(0, -scaledHeight, 0)
        bottomRight = new BGE.Math.Vector(scaledWidth, -scaledHeight, 0)

        m.worldPoints.topLeft = m.transformationMatrix.multVecMatrix(topLeft)
        m.worldPoints.topRight = m.transformationMatrix.multVecMatrix(topRight)
        m.worldPoints.bottomLeft = m.transformationMatrix.multVecMatrix(bottomLeft)
        m.worldPoints.bottomRight = m.transformationMatrix.multVecMatrix(bottomRight)

        m.surfaceNormal = m.worldPoints.getNormal()
      end if
    end sub


    override function getPositionForCameraDistance() as BGE.Math.Vector
      return m.worldPoints.getCenter()
    end function

    override function getPositionsForFrustumCheck() as BGE.Math.Vector[]
      return m.worldPoints.toArray()
    end function

    protected function findCanvasPosition(renderer as Renderer) as boolean
      if m.drawMode = BGE.SceneObjectImageDrawMode.directToCamera
        m.canvasPosition = renderer.worldPointToCanvasPoint(m.worldPosition)

      else if m.drawMode = BGE.SceneObjectImageDrawMode.attemptToOrient
        index = 0
        for each corner in m.worldPoints.toArray()
          canvasPoint = renderer.worldPointToCanvasPoint(corner)
          if invalid = canvasPoint
            return false
          end if
          m.canvasPoints.setPointByIndex(index, canvasPoint)
          index++
        end for

        m.surfaceToCameraDotProduct = m.surfaceNormal.dotProduct(renderer.camera.orientation)
        m.isMirror = false
        if m.surfaceToCameraDotProduct < 0
          m.isMirror = true
        end if
      end if
      return true
    end function


    protected function drawToCanvas(renderer as BGE.Renderer) as boolean

      retVal = false

      if m.drawMode = BGE.SceneObjectImageDrawMode.directToCamera
        drawPos = m.canvasPosition
        scaleX = m.drawable.scale.x
        scaleY = m.drawable.scale.y
        theta = m.drawable.rotation.z
      else if m.drawMode = BGE.SceneObjectImageDrawMode.attemptToOrient
        if m.isMirror
          return true
        end if
        drawableRegion = new RegionWithId(m.drawable.region, m.id)
        retVal = renderer.drawPinnedCorners(m.canvasPoints, drawableRegion, m.isMirror)
      end if

      return retVal

    end function


  end class

end namespace