namespace BGE

  enum SceneObjectType
    Line = "Line"
    Rectangle = "Rectangle"
    Text = "Text"
    Bitmap = "Bitmap"
    Polygon = "Polygon"
    Billboard = "Billboard"
  end enum

  enum SceneObjectDrawMode
    matchCamera = 0
    directToCamera = 1
    attemptToOrient = 2
  end enum

  class SceneObject

    name as string

    ' Unique Id
    id as string = ""

    drawable as Drawable

    type as SceneObjectType

    negDistanceFromCamera as float = 0

    private previousTransform = {}

    worldPosition as BGE.Math.Vector = new BGE.Math.Vector()

    ' The Current Transformation Matrix
    transformationMatrix as BGE.Math.Matrix44 = new BGE.Math.Matrix44()

    lastBitmap as object

    protected framesSinceDrawn = 0

    protected hasValidWorldPosition = false
    protected hasValidCanvasPosition = false

    protected wasEnabledLastFrame = false

    protected isFirstFrameSinceEnabled = false


    drawMode as SceneObjectDrawMode = BGE.SceneObjectDrawMode.matchCamera


    sub new(name as string, drawableObj as Drawable, objType as SceneObjectType)
      m.name = name
      m.drawable = drawableObj
      m.type = objType
    end sub

    sub setId(id as string)
      if m.id = ""
        m.id = id
      end if
    end sub

    sub update(cameraObj as Camera)
      objMovedLastFrame = m.drawable.movedLastFrame(true)
      m.isFirstFrameSinceEnabled = (m.isEnabled() and not m.wasEnabledLastFrame)
      forceRecompute = objMovedLastFrame or not m.hasValidWorldPosition or m.isFirstFrameSinceEnabled
      if forceRecompute
        m.drawable.computeTransformationMatrix()
        m.transformationMatrix.setFrom(m.drawable.transformationMatrix.multiply(m.drawable.owner.transformationMatrix))
        sceneObjDrawMode = m.getActualDrawMode(cameraObj)
        m.hasValidWorldPosition = m.updateWorldPosition(sceneObjDrawMode)
      end if
      if cameraObj.movedLastFrame() or objMovedLastFrame
        drawModeToUse = m.getActualDrawMode(cameraObj)
        m.negDistanceFromCamera = -cameraObj.distanceFromCameraFront(m.getPositionForCameraDistance(drawModeToUse))
      end if
      m.wasEnabledLastFrame = m.isEnabled()
    end sub

    function getPositionForCameraDistance(drawMode as SceneObjectDrawMode) as BGE.Math.Vector
      return m.worldPosition
    end function

    function isEnabled() as boolean
      return m.drawable.isEnabled()
    end function

    protected function updateWorldPosition(drawMode as SceneObjectDrawMode) as boolean
      m.worldPosition = m.drawable.getWorldPosition()
      return true
    end function


    sub draw(renderer as Renderer)
      ' No op - needs to be overriden in Specific types of scene objects
      didDraw = false
      if m.isPotentiallyOnScreen(renderer.camera)
        drawModeToUse = m.getActualDrawMode(renderer.camera)
        if m.objMovedInRelationToCamera(renderer.camera) or not m.hasValidCanvasPosition or m.isFirstFrameSinceEnabled
          m.hasValidCanvasPosition = m.findCanvasPosition(renderer, drawModeToUse)
        end if
        if m.hasValidCanvasPosition
          didDraw = m.performDraw(renderer, drawModeToUse)
          if didDraw
            m.afterDraw()
          end if
        end if
      end if
      if didDraw
        m.resetFrameSinceDrawn()
      else
        m.framesSinceDrawn++
      end if
      m.isFirstFrameSinceEnabled = false
    end sub

    private function getActualDrawMode(cam as Camera) as BGE.SceneObjectDrawMode
      if m.drawMode = BGE.SceneObjectDrawMode.matchCamera
        return cam.getDrawMode()
      end if
      return m.drawMode
    end function


    protected function findCanvasPosition(renderer as Renderer, drawMode as SceneObjectDrawMode) as boolean
      return true
    end function


    protected function performDraw(renderer as Renderer, drawMode as SceneObjectDrawMode) as boolean
      ' No op - needs to be overriden in Specific types of scene objects
      return false
    end function



    protected sub afterDraw()
      ' No op - needs to be overriden in Specific types of scene objects
    end sub

    protected sub resetFrameSinceDrawn()
      m.framesSinceDrawn = 0
    end sub


    protected function objMovedInRelationToCamera(cameraObj as Camera) as boolean
      return m.drawable.movedLastFrame(true) or cameraObj.movedLastFrame()
    end function

    protected function isPotentiallyOnScreen(cameraObj as Camera) as boolean
      if m.framesSinceDrawn = 0 or m.isFirstFrameSinceEnabled
        return true
      end if
      if not m.objMovedInRelationToCamera(cameraObj)
        return false
      end if
      inCamera = false
      frustumCheckPositions = m.getPositionsForFrustumCheck(m.getActualDrawMode(cameraObj))
      for each checkPos in frustumCheckPositions
        inCamera = cameraObj.isInView(checkPos)
        if inCamera
          exit for
        end if
      end for
      return inCamera
    end function



    function getPositionsForFrustumCheck(drawMode as SceneObjectDrawMode) as BGE.Math.Vector[]
      return[m.worldPosition]
    end function

  end class

end namespace