namespace BGE

  enum SceneObjectType
    Line = "Line"
    Rectangle = "Rectangle"
    Text = "Text"
    Bitmap = "Bitmap"
    Polygon = "Polygon"
  end enum

  class SceneObject

    name as string

    ' Unique Id
    id as string = ""

    drawable as Drawable

    type as SceneObjectType

    negDistanceFromCamera as float = 0

    private previousTransform = {}

    worldPosition as BGE.Math.Vector = new BGE.Math.Vector()

    ' The Current Transformation Matrix
    transformationMatrix as BGE.Math.Matrix44 = new BGE.Math.Matrix44()

    lastBitmap as object

    protected framesSinceDrawn = 0

    sub new(name as string, drawableObj as Drawable, objType as SceneObjectType)
      m.name = name
      m.drawable = drawableObj
      m.type = objType
    end sub

    sub setId(id as string)
      if m.id = ""
        m.id = id
      end if
    end sub

    sub update(cameraObj as Camera)
      objMovedLastFrame = m.drawable.movedLastFrame(true)
      if objMovedLastFrame or invalid = m.worldPosition
        m.drawable.computeTransformationMatrix()
        m.transformationMatrix.setFrom(m.drawable.transformationMatrix.multiply(m.drawable.owner.transformationMatrix))
        m.updateWorldPosition()
      end if
      if cameraObj.movedLastFrame() or objMovedLastFrame
        m.negDistanceFromCamera = -cameraObj.distanceFromFrustum("near", m.getPositionForCameraDistance())
      end if
    end sub

    function getPositionForCameraDistance() as BGE.Math.Vector
      return m.worldPosition
    end function

    function isEnabled() as boolean
      return m.drawable.isEnabled()
    end function

    protected sub updateWorldPosition()
      m.worldPosition = m.drawable.getWorldPosition()
    end sub


    sub draw(renderer as Renderer)
      ' No op - needs to be overriden in Specific types of scene objects
      didDraw = false
      if m.isPotentiallyOnScreen(renderer.camera)
        didDraw = m.performDraw(renderer)
      end if
      if didDraw
        m.resetFrameSinceDrawn()
      else
        m.framesSinceDrawn++
      end if
    end sub


    protected function performDraw(renderer as Renderer) as boolean
      ' No op - needs to be overriden in Specific types of scene objects
      return false
    end function

    protected sub resetFrameSinceDrawn()
      m.framesSinceDrawn = 0
    end sub

    protected function isPotentiallyOnScreen(cameraObj as Camera) as boolean
      objMovedLastFrameInRelationToCamera = m.drawable.movedLastFrame(true) or cameraObj.movedLastFrame()
      if m.framesSinceDrawn = 0
        return true
      end if
      if not objMovedLastFrameInRelationToCamera
        return false
      end if
      inCamera = false
      frustumCheckPositions = m.getPositionsForFrustumCheck()
      for each checkPos in frustumCheckPositions
        inCamera = cameraObj.isInFrustum(checkPos)
        if inCamera
          exit for
        end if
      end for
      return inCamera
    end function



    function getPositionsForFrustumCheck() as BGE.Math.Vector[]
      return[m.worldPosition]
    end function

  end class




end namespace