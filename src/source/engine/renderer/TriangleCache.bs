namespace BGE

  class TriangleCacheEntry

    triangle as TriangleBitmap

    timeLastUsed as integer


    sub new(triangle as TriangleBitmap)
      m.triangle = Triangle
    end sub


    sub updateTime(newTime as integer)
      m.timeLastUsed = newTime
    end sub

  end class


  class TriangleCache
    private cache = {}
    private dateTime as object 'roDateTime
    private cacheKeepSeconds as integer
    sub new(cacheKeepSeconds = 60 as integer)
      m.dateTime = CreateObject("roDateTime")
      m.cacheKeepSeconds = cacheKeepSeconds
    end sub

    function getTriangle(id as string, points as BGE.Math.Vector[]) as TriangleBitmap
      if id = ""
        return invalid
      end if

      key = m.makeKey(id, points)

      if invalid <> m.cache[key]
        triangleEntry = m.cache[key]
        m.dateTime.mark()
        triangleEntry.updateTime(m.dateTime.asSeconds())
        return triangleEntry.triangle
      end if
      return invalid
    end function


    sub addTriangle(id as string, points as BGE.Math.Vector[], triangleBmp as TriangleBitmap)
      if id = "" or invalid = triangleBmp
        return
      end if

      key = m.makeKey(id, points)
      cacheEntry = new TriangleCacheEntry(triangleBmp)
      m.dateTime.mark()
      cacheEntry.updateTime(m.dateTime.asSeconds())
      m.cache[key] = cacheEntry
    end sub

    private function makeKey(id as string, points as BGE.Math.Vector[]) as string
      arrayString = "["
      i = 0
      for each point in points
        if i > 0
          arrayString += ","
        end if
        arrayString += BGE.Math.VectorOps.toStr(point)
        i++
      end for
      arrayString += "]"
      return id + "-" + arrayString
    end function


    sub cleanCache()
      m.dateTime.mark()
      currentTime = m.dateTime.asSeconds()

      for each item in m.cache.items()
        if invalid <> item.value
          cacheEntry = item.value
          timeDelta = currentTime - cacheEntry.timeLastUsed
          if timeDelta >= m.cacheKeepSeconds
            m.cache.delete(item.key)
          end if
        end if
      end for
    end sub

  end class

end namespace