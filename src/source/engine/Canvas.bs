' @module BGE
namespace BGE
  ' Contains a roku roBitmap which all game objects get drawn to.
  class Canvas

    ' bitmap GameEntity images get drawn to
    bitmap as object = invalid
    ' Position offset from screen coordinates (z value ignored)
    offset as BGE.Math.Vector = new BGE.Math.Vector()

    ' Scale (z value ignored)
    scale as BGE.Math.Vector = new BGE.Math.Vector(1, 1, 1)

    ' Renderer for this canvas
    renderer as Renderer


    private game as Game

    ' Creates a Canvas object and bitmap
    '
    ' @param {integer} canvasWidth - width of canvas
    ' @param {integer} canvasHeight - height of canvas
    function new(game as Game, canvasWidth as integer, canvasHeight as integer) as void
      m.game = game
      m.setSize(canvasWidth, canvasHeight)
    end function


    ' Changes the size of the canvas
    '
    ' @param {integer} canvasWidth - width of canvas
    ' @param {integer} canvasHeight - height of canvas
    function setSize(canvasWidth as integer, canvasHeight as integer) as void
      m.setBitmap(CreateObject("roBitmap", {width: canvasWidth, height: canvasHeight, AlphaEnable: true}))
    end function


    sub setBitmap(bitmap as object)
      m.bitmap = bitmap
      if invalid = m.renderer
        m.renderer = new Renderer(m.game, m.bitmap)
      else
        m.renderer.draw2d = m.bitmap
      end if
    end sub

    ' Clears the canvas to the given background color
    '
    ' @param {integer} color
    sub clear(color as integer)
      m.bitmap.Clear(color)
    end sub


    ' Gets the offset of the canvas from the screen
    '
    ' @return {BGE.Math.Vector} - Position offset
    function getOffset() as BGE.Math.Vector
      return m.offset.copy()
    end function


    ' Gets the scale of the canvas
    '
    ' @return {BGE.Math.Vector} - Scale as object
    function getScale() as object
      return m.scale.copy()
    end function


    ' Sets the offset of the canvase.
    ' This is as Float to allow incrementing by less than 1 pixel, it is converted to integer internally
    '
    '
    ' @param {float} x - x offset
    ' @param {float} y - y offset
    function setOffset(x as float, y as float) as void
      m.offset.x = x
      m.offset.y = y
    end function


    ' Sets the scale of the canvas
    '
    ' @param {float} scale_x - horizontal scale
    ' @param {dynamic} [scale_y=invalid] - vertical scale, or if invalid, use the horizontal scale as vertical scale
    function setScale(scale_x as float, scale_y = invalid as dynamic) as void
      if scale_y = invalid or not (rodash.isFloat(scale_Y) or rodash.isInteger(scale_y))
        scale_y = scale_x
      end if
      m.scale.x = scale_x
      m.scale.y = scale_y
    end function


    ' Gets the width of the underlying bitmap
    '
    ' @return {integer}
    function getWidth() as integer
      if invalid <> m.bitmap
        return m.bitmap.getWidth()
      end if
      return -1
    end function

    ' Gets the height of the underlying bitmap
    '
    ' @return {integer}
    function getHeight() as integer
      if invalid <> m.bitmap
        return m.bitmap.getHeight()
      end if
      return -1
    end function

  end class
end namespace
