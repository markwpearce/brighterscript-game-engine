namespace BGE

  ' Wrapper for Draw2D calls, so that we can keep track of how much is being drawn per frame
  class Renderer


    ' Frame rate target - the game will reduce quality if this target is not met
    protected minimumFrameRateTarget as integer = 12

    protected onlyDrawWhenInFrame as boolean = true

    private drawCallsLastFrame = 0

    private draw2d as object = invalid

    sub new(draw2d as object)
      m.draw2d = draw2d
    end sub

    sub resetDrawCallCounter()
      m.drawCallsLastFrame = 0
    end sub


    ' Draws text to the screen
    '
    ' @param {string} text the test to display
    ' @param {integer} x
    ' @param {integer} y
    ' @param {object} font Font object to use
    ' @param {integer} [color=-1] RGBA color to use
    ' @param {string} [horizAlign="left"] Horizontal Alignment - "left", "right" or "center"
    ' @param {string} [vertAlign="left"] Vertical Alignment - "top", "bottom" or "center"
    sub drawText(text as string, x as integer, y as integer, font as object, color = -1 as integer, horizAlign = "left" as string, vertAlign = "top" as string) as void
      width = font.GetOneLineWidth(text, 10000)
      height = font.GetOneLineHeight() * BGE.getNumberOfLinesInAString(text)
      textX = x
      textY = y

      if horizAlign = "right"
        textX = x - width
      else if horizAlign = "center"
        textX = x - width / 2
      end if

      if vertAlign = "bottom"
        textY = y - height
      else if vertAlign = "center"
        textY = y - height / 2
      end if
      if m.shouldDraw(textX, textY, width, height)
        m.draw2d.DrawText(text, textX, textY, color, font)
        m.drawCallsLastFrame++
      end if
    end sub

    ' NOTE: This function is unsafe! It creates an roBitmap of the required size to be able to both scale and rotate the drawing, this action requires free video memory of the appropriate amount.
    sub drawScaledAndRotatedObject(x as float, y as float, scale_x as float, scale_y as float, theta as float, drawable as object, color = -1 as integer) as void
      new_width = Abs(int(drawable.GetWidth() * scale_x))
      new_height = Abs(int(drawable.GetHeight() * scale_y))
      if new_width <> 0 and new_height <> 0 and m.shouldDraw(x, y, new_width, new_height, theta)
        scaledBitmap = CreateObject("roBitmap", {width: new_width, height: new_height, AlphaEnable: true})
        scaledRegion = CreateObject("roRegion", scaledBitmap, 0, 0, new_width, new_height)
        pretranslation_x = drawable.GetPretranslationX()
        pretranslation_y = drawable.GetPretranslationY()
        newPreX = pretranslation_x * scale_x
        if scale_x < 0
          newPreX = -newPreX
        end if
        newPreY = pretranslation_y * scale_y
        if scale_y < 0
          newPreY = -newPreY
        end if
        scaledRegion.setPretranslation(-Abs(newPreX), -Abs(newPreY))
        scaled_draw_x = Abs(newPreX)
        scaled_draw_y = Abs(newPreY)
        scaledRegion.DrawScaledObject(scaled_draw_x, scaled_draw_y, scale_x, scale_y, drawable)
        m.drawCallsLastFrame++

        m.draw2d.DrawRotatedObject(x, y, theta, scaledRegion, color)
        m.drawCallsLastFrame++
      end if
    end sub


    sub drawCircleOutline(object, line_count as integer, x as float, y as float, radius as float, rgba as integer)
      if not m.shouldDraw(x - radius, y - radius, radius * 2, radius * 2)
        return
      end if

      previous_x = radius
      previous_y = 0
      for i = 0 to line_count
        degrees = 360 * (i / line_count)
        current_x = cos(degrees * .01745329) * radius
        current_y = sin(degrees * .01745329) * radius

        m.draw2d.DrawLine(x + previous_x, y + previous_y, x + current_x, y + current_y, rgba)
        m.drawCallsLastFrame++

        previous_x = current_x
        previous_y = current_y
      end for
    end sub


    sub drawRectangleOutline(x as float, y as float, width as float, height as float, rgba as integer)
      if not m.shouldDraw(x, y, width, height)
        return
      end if

      m.draw2d.DrawLine(x, y, x + width, y, rgba)
      m.draw2d.DrawLine(x, y, x, y + height, rgba)
      m.draw2d.DrawLine(x + width, y, x + width, y + height, rgba)
      m.draw2d.DrawLine(x, y + height, x + width, y + height, rgba)
      m.drawCallsLastFrame += 4
    end sub

    sub drawObject(x as integer, y as integer, src as object)
      if not m.shouldDraw(x, y, src.getWidth(), src.getHeight())
        return
      end if
      m.draw2d.drawObject(x, y, src)
      m.drawCallsLastFrame++
    end sub


    sub drawScaledObject(x as integer, y as integer, scaleX as float, scaleY as float, src as object)
      if not m.shouldDraw(x, y, src.getWidth() * scaleX, src.getHeight() * scaleY)
        return
      end if
      m.draw2d.DrawScaledObject(x, y, scaleX, scaleY, src)
      m.drawCallsLastFrame++
    end sub



    private function shouldDraw(x as float, y as float, width as float, height as float, rotation = 0 as float) as boolean
      if not m.onlyDrawWhenInFrame
        return true
      end if
      return m.isInsideCanvas(x, y, width, height, rotation)
    end function



    ' Checks to see if a rectangle will be in a Draw2d Canvas
    '
    ' @param {float} x
    ' @param {float} y
    ' @param {float} width
    ' @param {float} height
    ' @return {boolean} true if this rectangle overlaps with the canvas
    function isInsideCanvas(x as float, y as float, width as float, height as float, rotation = 0 as float) as boolean
      canvasWidth = m.draw2d.getWidth()
      canvasHeight = m.draw2d.getHeight()
      if rotation <> 0
        ' use diagonal as radius for seeing were rotated points could be
        ' this gives a bigger approximation for rotated objects, but is easier
        radius = Sqr(width * width + height * height)
        x = BGE.Math.Min(x, x + cos(rotation) * radius)
        y = BGE.Math.Min(y, y + sin(rotation) * radius)
        width = radius
        height = radius
      end if
      ' check each corner
      corners = [
        {x: x, y: y},
        {x: x + width, y: y},
        {x: x, y: y + height},
        {x: x + width, y: y + height}
      ]
      insideCanvas = false
      for each point in corners
        if x >= 0 and x <= canvasWidth and y >= 0 and y <= canvasHeight
          ' if one corner is in then this will be drawn
          insideCanvas = true
          exit for
        end if
      end for
      ' no corner is in the canvas, but this whole thing could overlap somehow
      if not insideCanvas and x < 0 and (x + width) > canvasWidth
        if y < 0
          insideCanvas = (y + height) >= 0
        else if y <= canvasHeight
          insideCanvas = true
        end if
      end if
      if not insideCanvas and y < 0 and (y + height) > canvasHeight
        if x < 0
          insideCanvas = (x + width) >= 0
        else if x <= canvasWidth
          insideCanvas = true
        end if
      end if

      return insideCanvas
    end function

  end class

end namespace
