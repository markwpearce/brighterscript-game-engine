namespace BGE.UI

  ' Base Abstract class for all UI Elements
  class UiWidget extends BGE.GameEntity

    ' If position = "custom", then m.customX is horizontal position of this element from the parent position
    ' and m.customY is the vertical position of this element from the parent position (positive is down)
    customPosition as boolean = false

    customX as float = 0
    customY as float = 0

    ' If customPosition is false, this dictates where horizontally in the container this element should go. Can be: "left", "center" or "right"
    horizAlign = "left" ' as HorizAlignment = HorizAlignment.left
    ' If customPosition is false, this dictates where vertically in the container this element should go. Can be: "top", "center" or "bottom"
    vertAlign = "top" 'as VertAlignment = VertAlignment.top

    ' Width of the element
    width as integer = 0
    ' Height of the element
    height as integer = 0

    protected canvas as object

    padding as Offset
    margin as Offset


    sub new(game as BGE.Game)
      super(game)
      m.padding = new Offset()
      m.margin = new Offset()
      m.setCanvas(game.getCanvas())
    end sub


    ' Function to get the value of the UI element
    '
    ' @return {dynamic} - the value of this element
    function getValue() as dynamic
      return invalid
    end function


    ' Method called each frame to draw any images of this entity
    '
    ' @param {object} [parent=invalid] - the parent of this Ui Element - will be an object with {x, y, width, height}
    sub draw(parent = invalid as object)
    end sub


    ' Set the canvas this UIWidgetDraws to
    '
    ' @param {object} [canvas=invalid] The canvas this should draw to - if invalid, then will draw to the game canvas
    sub setCanvas(canvas = invalid as object)
      if canvas <> invalid
        m.canvas = canvas
      else
        m.canvas = m.game.getCanvas()
      end if
    end sub

    ' Method called each frame to reposition
    '
    ' @param {UiWidget} [parent=invalid] - the parent of this Ui Element - will be an object with {x, y, width, height}
    sub repositionBasedOnParent(parent = invalid as UiWidget)
      m.position = m.getWorldPosition(parent)
    end sub

    ' Method called each frame to draw any images of this entity
    '
    ' @param {UiWidget} [parent=invalid] - the parent of this Ui Element
    ' @return {BGE.Math.Vector} - x,y coordinates of where this widget should be positioned
    protected function getWorldPosition(parent = invalid as UiWidget) as BGE.Math.Vector
      drawPosition = new BGE.Math.Vector()
      parentPadding = new Offset()
      if invalid <> parent
        drawPosition.x += parent.position.x
        drawPosition.y += parent.position.y
        if invalid <> parent.padding
          parentPadding = parent.padding
        end if
      else
        parent = new BGE.Math.Vector()
      end if

      if m.customPosition or invalid = parent.width or invalid = parent.height
        drawPosition.x += m.customX
        drawPosition.y += m.customY
      else
        if m.horizAlign = "left" 'HorizAlignment.left
          drawPosition.x += m.margin.left + parentPadding.left
        else if m.horizAlign = "center" 'HorizAlignment.center
          drawPosition.x += parent.width / 2 - m.width / 2
        else if m.horizAlign = "right" 'HorizAlignment.right
          drawPosition.x += parent.width - m.width - parentPadding.right - m.margin.right
        end if

        if m.vertAlign = "top" 'VertAlignment.top
          drawPosition.y += m.margin.top + parentPadding.top
        else if m.vertAlign = "center" 'VertAlignment.center
          drawPosition.y += parent.height / 2 - m.height / 2
        else if m.vertAlign = "bottom" 'VertAlignment.bottom
          drawPosition.y += parent.height - m.height - m.margin.bottom - parentPadding.bottom
        end if
      end if
      return drawPosition
    end function


  end class

end namespace
